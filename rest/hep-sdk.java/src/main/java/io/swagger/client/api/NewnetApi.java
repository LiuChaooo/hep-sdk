/*
 * HEP REST API
 * The REST API for HEP protocol
 *
 * OpenAPI spec version: v1
 * Contact: xiawu@zeuux.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AuthCacheRequest;
import io.swagger.client.model.AuthCacheResponse;
import io.swagger.client.model.CreateAuthCacheResponse;
import io.swagger.client.model.CreatePayCacheResponse;
import io.swagger.client.model.PayCacheRequest;
import io.swagger.client.model.PayCacheResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NewnetApi {
    private ApiClient apiClient;

    public NewnetApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NewnetApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for newnetCachesAuthCreate
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call newnetCachesAuthCreateCall(AuthCacheRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/newnet/caches/auth/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call newnetCachesAuthCreateValidateBeforeCall(AuthCacheRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling newnetCachesAuthCreate(Async)");
        }
        
        com.squareup.okhttp.Call call = newnetCachesAuthCreateCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Caches the authentication request
     * @param body  (required)
     * @return CreateAuthCacheResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateAuthCacheResponse newnetCachesAuthCreate(AuthCacheRequest body) throws ApiException {
        ApiResponse<CreateAuthCacheResponse> resp = newnetCachesAuthCreateWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * Caches the authentication request
     * @param body  (required)
     * @return ApiResponse&lt;CreateAuthCacheResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateAuthCacheResponse> newnetCachesAuthCreateWithHttpInfo(AuthCacheRequest body) throws ApiException {
        com.squareup.okhttp.Call call = newnetCachesAuthCreateValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<CreateAuthCacheResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Caches the authentication request
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call newnetCachesAuthCreateAsync(AuthCacheRequest body, final ApiCallback<CreateAuthCacheResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = newnetCachesAuthCreateValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateAuthCacheResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for newnetCachesAuthRead
     * @param authHash  (required)
     * @param dappKey The decentralized application access key (required)
     * @param protocol The protocol name. default is &#x27;HEP&#x27;. (required)
     * @param version The protocol version such as &#x27;1.0&#x27; (required)
     * @param ts The current timestamp (required)
     * @param nonce The random string or auto-increment sequence (required)
     * @param os The operating system of client such as ios, android, dweb,etc. (required)
     * @param language The i18n language code such as zh, en, etc. (required)
     * @param md5 The HMAC authentication md5 checksum (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call newnetCachesAuthReadCall(String authHash, String dappKey, String protocol, String version, Integer ts, String nonce, String os, String language, String md5, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/newnet/caches/auth/{auth_hash}/"
            .replaceAll("\\{" + "auth_hash" + "\\}", apiClient.escapeString(authHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (dappKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dapp_key", dappKey));
        if (protocol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("protocol", protocol));
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));
        if (ts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ts", ts));
        if (nonce != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nonce", nonce));
        if (os != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("os", os));
        if (language != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("language", language));
        if (md5 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("md5", md5));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call newnetCachesAuthReadValidateBeforeCall(String authHash, String dappKey, String protocol, String version, Integer ts, String nonce, String os, String language, String md5, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authHash' is set
        if (authHash == null) {
            throw new ApiException("Missing the required parameter 'authHash' when calling newnetCachesAuthRead(Async)");
        }
        // verify the required parameter 'dappKey' is set
        if (dappKey == null) {
            throw new ApiException("Missing the required parameter 'dappKey' when calling newnetCachesAuthRead(Async)");
        }
        // verify the required parameter 'protocol' is set
        if (protocol == null) {
            throw new ApiException("Missing the required parameter 'protocol' when calling newnetCachesAuthRead(Async)");
        }
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling newnetCachesAuthRead(Async)");
        }
        // verify the required parameter 'ts' is set
        if (ts == null) {
            throw new ApiException("Missing the required parameter 'ts' when calling newnetCachesAuthRead(Async)");
        }
        // verify the required parameter 'nonce' is set
        if (nonce == null) {
            throw new ApiException("Missing the required parameter 'nonce' when calling newnetCachesAuthRead(Async)");
        }
        // verify the required parameter 'os' is set
        if (os == null) {
            throw new ApiException("Missing the required parameter 'os' when calling newnetCachesAuthRead(Async)");
        }
        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling newnetCachesAuthRead(Async)");
        }
        // verify the required parameter 'md5' is set
        if (md5 == null) {
            throw new ApiException("Missing the required parameter 'md5' when calling newnetCachesAuthRead(Async)");
        }
        
        com.squareup.okhttp.Call call = newnetCachesAuthReadCall(authHash, dappKey, protocol, version, ts, nonce, os, language, md5, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get the authentication information by given request hash.
     * @param authHash  (required)
     * @param dappKey The decentralized application access key (required)
     * @param protocol The protocol name. default is &#x27;HEP&#x27;. (required)
     * @param version The protocol version such as &#x27;1.0&#x27; (required)
     * @param ts The current timestamp (required)
     * @param nonce The random string or auto-increment sequence (required)
     * @param os The operating system of client such as ios, android, dweb,etc. (required)
     * @param language The i18n language code such as zh, en, etc. (required)
     * @param md5 The HMAC authentication md5 checksum (required)
     * @return AuthCacheResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthCacheResponse newnetCachesAuthRead(String authHash, String dappKey, String protocol, String version, Integer ts, String nonce, String os, String language, String md5) throws ApiException {
        ApiResponse<AuthCacheResponse> resp = newnetCachesAuthReadWithHttpInfo(authHash, dappKey, protocol, version, ts, nonce, os, language, md5);
        return resp.getData();
    }

    /**
     * 
     * Get the authentication information by given request hash.
     * @param authHash  (required)
     * @param dappKey The decentralized application access key (required)
     * @param protocol The protocol name. default is &#x27;HEP&#x27;. (required)
     * @param version The protocol version such as &#x27;1.0&#x27; (required)
     * @param ts The current timestamp (required)
     * @param nonce The random string or auto-increment sequence (required)
     * @param os The operating system of client such as ios, android, dweb,etc. (required)
     * @param language The i18n language code such as zh, en, etc. (required)
     * @param md5 The HMAC authentication md5 checksum (required)
     * @return ApiResponse&lt;AuthCacheResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthCacheResponse> newnetCachesAuthReadWithHttpInfo(String authHash, String dappKey, String protocol, String version, Integer ts, String nonce, String os, String language, String md5) throws ApiException {
        com.squareup.okhttp.Call call = newnetCachesAuthReadValidateBeforeCall(authHash, dappKey, protocol, version, ts, nonce, os, language, md5, null, null);
        Type localVarReturnType = new TypeToken<AuthCacheResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the authentication information by given request hash.
     * @param authHash  (required)
     * @param dappKey The decentralized application access key (required)
     * @param protocol The protocol name. default is &#x27;HEP&#x27;. (required)
     * @param version The protocol version such as &#x27;1.0&#x27; (required)
     * @param ts The current timestamp (required)
     * @param nonce The random string or auto-increment sequence (required)
     * @param os The operating system of client such as ios, android, dweb,etc. (required)
     * @param language The i18n language code such as zh, en, etc. (required)
     * @param md5 The HMAC authentication md5 checksum (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call newnetCachesAuthReadAsync(String authHash, String dappKey, String protocol, String version, Integer ts, String nonce, String os, String language, String md5, final ApiCallback<AuthCacheResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = newnetCachesAuthReadValidateBeforeCall(authHash, dappKey, protocol, version, ts, nonce, os, language, md5, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthCacheResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for newnetCachesPayCreate
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call newnetCachesPayCreateCall(PayCacheRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/newnet/caches/pay/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call newnetCachesPayCreateValidateBeforeCall(PayCacheRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling newnetCachesPayCreate(Async)");
        }
        
        com.squareup.okhttp.Call call = newnetCachesPayCreateCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Cache the pay request
     * @param body  (required)
     * @return CreatePayCacheResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreatePayCacheResponse newnetCachesPayCreate(PayCacheRequest body) throws ApiException {
        ApiResponse<CreatePayCacheResponse> resp = newnetCachesPayCreateWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * Cache the pay request
     * @param body  (required)
     * @return ApiResponse&lt;CreatePayCacheResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreatePayCacheResponse> newnetCachesPayCreateWithHttpInfo(PayCacheRequest body) throws ApiException {
        com.squareup.okhttp.Call call = newnetCachesPayCreateValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<CreatePayCacheResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Cache the pay request
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call newnetCachesPayCreateAsync(PayCacheRequest body, final ApiCallback<CreatePayCacheResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = newnetCachesPayCreateValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreatePayCacheResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for newnetCachesPayRead
     * @param payHash  (required)
     * @param dappKey The decentralized application access key (required)
     * @param protocol The protocol name. default is &#x27;HEP&#x27;. (required)
     * @param version The protocol version such as &#x27;1.0&#x27; (required)
     * @param ts The current timestamp (required)
     * @param nonce The random string or auto-increment sequence (required)
     * @param os The operating system of client such as ios, android, dweb,etc. (required)
     * @param language The i18n language code such as zh, en, etc. (required)
     * @param md5 The HMAC authentication md5 checksum (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call newnetCachesPayReadCall(String payHash, String dappKey, String protocol, String version, Integer ts, String nonce, String os, String language, String md5, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/newnet/caches/pay/{pay_hash}/"
            .replaceAll("\\{" + "pay_hash" + "\\}", apiClient.escapeString(payHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (dappKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dapp_key", dappKey));
        if (protocol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("protocol", protocol));
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));
        if (ts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ts", ts));
        if (nonce != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nonce", nonce));
        if (os != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("os", os));
        if (language != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("language", language));
        if (md5 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("md5", md5));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call newnetCachesPayReadValidateBeforeCall(String payHash, String dappKey, String protocol, String version, Integer ts, String nonce, String os, String language, String md5, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'payHash' is set
        if (payHash == null) {
            throw new ApiException("Missing the required parameter 'payHash' when calling newnetCachesPayRead(Async)");
        }
        // verify the required parameter 'dappKey' is set
        if (dappKey == null) {
            throw new ApiException("Missing the required parameter 'dappKey' when calling newnetCachesPayRead(Async)");
        }
        // verify the required parameter 'protocol' is set
        if (protocol == null) {
            throw new ApiException("Missing the required parameter 'protocol' when calling newnetCachesPayRead(Async)");
        }
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling newnetCachesPayRead(Async)");
        }
        // verify the required parameter 'ts' is set
        if (ts == null) {
            throw new ApiException("Missing the required parameter 'ts' when calling newnetCachesPayRead(Async)");
        }
        // verify the required parameter 'nonce' is set
        if (nonce == null) {
            throw new ApiException("Missing the required parameter 'nonce' when calling newnetCachesPayRead(Async)");
        }
        // verify the required parameter 'os' is set
        if (os == null) {
            throw new ApiException("Missing the required parameter 'os' when calling newnetCachesPayRead(Async)");
        }
        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling newnetCachesPayRead(Async)");
        }
        // verify the required parameter 'md5' is set
        if (md5 == null) {
            throw new ApiException("Missing the required parameter 'md5' when calling newnetCachesPayRead(Async)");
        }
        
        com.squareup.okhttp.Call call = newnetCachesPayReadCall(payHash, dappKey, protocol, version, ts, nonce, os, language, md5, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Retrieve the pay information by given pay hash.
     * @param payHash  (required)
     * @param dappKey The decentralized application access key (required)
     * @param protocol The protocol name. default is &#x27;HEP&#x27;. (required)
     * @param version The protocol version such as &#x27;1.0&#x27; (required)
     * @param ts The current timestamp (required)
     * @param nonce The random string or auto-increment sequence (required)
     * @param os The operating system of client such as ios, android, dweb,etc. (required)
     * @param language The i18n language code such as zh, en, etc. (required)
     * @param md5 The HMAC authentication md5 checksum (required)
     * @return PayCacheResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PayCacheResponse newnetCachesPayRead(String payHash, String dappKey, String protocol, String version, Integer ts, String nonce, String os, String language, String md5) throws ApiException {
        ApiResponse<PayCacheResponse> resp = newnetCachesPayReadWithHttpInfo(payHash, dappKey, protocol, version, ts, nonce, os, language, md5);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the pay information by given pay hash.
     * @param payHash  (required)
     * @param dappKey The decentralized application access key (required)
     * @param protocol The protocol name. default is &#x27;HEP&#x27;. (required)
     * @param version The protocol version such as &#x27;1.0&#x27; (required)
     * @param ts The current timestamp (required)
     * @param nonce The random string or auto-increment sequence (required)
     * @param os The operating system of client such as ios, android, dweb,etc. (required)
     * @param language The i18n language code such as zh, en, etc. (required)
     * @param md5 The HMAC authentication md5 checksum (required)
     * @return ApiResponse&lt;PayCacheResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PayCacheResponse> newnetCachesPayReadWithHttpInfo(String payHash, String dappKey, String protocol, String version, Integer ts, String nonce, String os, String language, String md5) throws ApiException {
        com.squareup.okhttp.Call call = newnetCachesPayReadValidateBeforeCall(payHash, dappKey, protocol, version, ts, nonce, os, language, md5, null, null);
        Type localVarReturnType = new TypeToken<PayCacheResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the pay information by given pay hash.
     * @param payHash  (required)
     * @param dappKey The decentralized application access key (required)
     * @param protocol The protocol name. default is &#x27;HEP&#x27;. (required)
     * @param version The protocol version such as &#x27;1.0&#x27; (required)
     * @param ts The current timestamp (required)
     * @param nonce The random string or auto-increment sequence (required)
     * @param os The operating system of client such as ios, android, dweb,etc. (required)
     * @param language The i18n language code such as zh, en, etc. (required)
     * @param md5 The HMAC authentication md5 checksum (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call newnetCachesPayReadAsync(String payHash, String dappKey, String protocol, String version, Integer ts, String nonce, String os, String language, String md5, final ApiCallback<PayCacheResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = newnetCachesPayReadValidateBeforeCall(payHash, dappKey, protocol, version, ts, nonce, os, language, md5, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PayCacheResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
