<?php
/**
 * RestApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * HEP REST API
 *
 * The REST API for HEP protocol
 *
 * OpenAPI spec version: v1
 * Contact: xiawu@zeuux.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * RestApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RestApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation restDappsRead
     *
     * @param  string $api_version api_version (required)
     * @param  string $dapp_id dapp_id (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#x27;HEP&#x27;. (required)
     * @param  string $version The protocol version such as &#x27;1.0&#x27; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $md5 The HMAC authentication md5 checksum (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Dapp
     */
    public function restDappsRead($api_version, $dapp_id, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $md5)
    {
        list($response) = $this->restDappsReadWithHttpInfo($api_version, $dapp_id, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $md5);
        return $response;
    }

    /**
     * Operation restDappsReadWithHttpInfo
     *
     * @param  string $api_version (required)
     * @param  string $dapp_id (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#x27;HEP&#x27;. (required)
     * @param  string $version The protocol version such as &#x27;1.0&#x27; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $md5 The HMAC authentication md5 checksum (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Dapp, HTTP status code, HTTP response headers (array of strings)
     */
    public function restDappsReadWithHttpInfo($api_version, $dapp_id, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $md5)
    {
        $returnType = '\Swagger\Client\Model\Dapp';
        $request = $this->restDappsReadRequest($api_version, $dapp_id, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $md5);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Dapp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restDappsReadAsync
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $dapp_id (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#x27;HEP&#x27;. (required)
     * @param  string $version The protocol version such as &#x27;1.0&#x27; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $md5 The HMAC authentication md5 checksum (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restDappsReadAsync($api_version, $dapp_id, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $md5)
    {
        return $this->restDappsReadAsyncWithHttpInfo($api_version, $dapp_id, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $md5)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restDappsReadAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $dapp_id (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#x27;HEP&#x27;. (required)
     * @param  string $version The protocol version such as &#x27;1.0&#x27; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $md5 The HMAC authentication md5 checksum (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restDappsReadAsyncWithHttpInfo($api_version, $dapp_id, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $md5)
    {
        $returnType = '\Swagger\Client\Model\Dapp';
        $request = $this->restDappsReadRequest($api_version, $dapp_id, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $md5);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restDappsRead'
     *
     * @param  string $api_version (required)
     * @param  string $dapp_id (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#x27;HEP&#x27;. (required)
     * @param  string $version The protocol version such as &#x27;1.0&#x27; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $md5 The HMAC authentication md5 checksum (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restDappsReadRequest($api_version, $dapp_id, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $md5)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling restDappsRead'
            );
        }
        // verify the required parameter 'dapp_id' is set
        if ($dapp_id === null || (is_array($dapp_id) && count($dapp_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_id when calling restDappsRead'
            );
        }
        // verify the required parameter 'dapp_key' is set
        if ($dapp_key === null || (is_array($dapp_key) && count($dapp_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_key when calling restDappsRead'
            );
        }
        // verify the required parameter 'protocol' is set
        if ($protocol === null || (is_array($protocol) && count($protocol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $protocol when calling restDappsRead'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling restDappsRead'
            );
        }
        // verify the required parameter 'ts' is set
        if ($ts === null || (is_array($ts) && count($ts) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ts when calling restDappsRead'
            );
        }
        // verify the required parameter 'nonce' is set
        if ($nonce === null || (is_array($nonce) && count($nonce) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nonce when calling restDappsRead'
            );
        }
        // verify the required parameter 'os' is set
        if ($os === null || (is_array($os) && count($os) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $os when calling restDappsRead'
            );
        }
        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling restDappsRead'
            );
        }
        // verify the required parameter 'md5' is set
        if ($md5 === null || (is_array($md5) && count($md5) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $md5 when calling restDappsRead'
            );
        }

        $resourcePath = '/rest/v{api_version}/dapps/{dapp_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dapp_key !== null) {
            $queryParams['dapp_key'] = ObjectSerializer::toQueryValue($dapp_key);
        }
        // query params
        if ($protocol !== null) {
            $queryParams['protocol'] = ObjectSerializer::toQueryValue($protocol);
        }
        // query params
        if ($version !== null) {
            $queryParams['version'] = ObjectSerializer::toQueryValue($version);
        }
        // query params
        if ($ts !== null) {
            $queryParams['ts'] = ObjectSerializer::toQueryValue($ts);
        }
        // query params
        if ($nonce !== null) {
            $queryParams['nonce'] = ObjectSerializer::toQueryValue($nonce);
        }
        // query params
        if ($os !== null) {
            $queryParams['os'] = ObjectSerializer::toQueryValue($os);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }
        // query params
        if ($md5 !== null) {
            $queryParams['md5'] = ObjectSerializer::toQueryValue($md5);
        }

        // path params
        if ($api_version !== null) {
            $resourcePath = str_replace(
                '{' . 'api_version' . '}',
                ObjectSerializer::toPathValue($api_version),
                $resourcePath
            );
        }
        // path params
        if ($dapp_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dapp_id' . '}',
                ObjectSerializer::toPathValue($dapp_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restNewidsRead
     *
     * @param  string $api_version api_version (required)
     * @param  string $newid newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#x27;HEP&#x27;. (required)
     * @param  string $version The protocol version such as &#x27;1.0&#x27; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $md5 The HMAC authentication md5 checksum (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\NewidResponse
     */
    public function restNewidsRead($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $md5)
    {
        list($response) = $this->restNewidsReadWithHttpInfo($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $md5);
        return $response;
    }

    /**
     * Operation restNewidsReadWithHttpInfo
     *
     * @param  string $api_version (required)
     * @param  string $newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#x27;HEP&#x27;. (required)
     * @param  string $version The protocol version such as &#x27;1.0&#x27; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $md5 The HMAC authentication md5 checksum (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\NewidResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function restNewidsReadWithHttpInfo($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $md5)
    {
        $returnType = '\Swagger\Client\Model\NewidResponse';
        $request = $this->restNewidsReadRequest($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $md5);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\NewidResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restNewidsReadAsync
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#x27;HEP&#x27;. (required)
     * @param  string $version The protocol version such as &#x27;1.0&#x27; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $md5 The HMAC authentication md5 checksum (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewidsReadAsync($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $md5)
    {
        return $this->restNewidsReadAsyncWithHttpInfo($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $md5)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restNewidsReadAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#x27;HEP&#x27;. (required)
     * @param  string $version The protocol version such as &#x27;1.0&#x27; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $md5 The HMAC authentication md5 checksum (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewidsReadAsyncWithHttpInfo($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $md5)
    {
        $returnType = '\Swagger\Client\Model\NewidResponse';
        $request = $this->restNewidsReadRequest($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $md5);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restNewidsRead'
     *
     * @param  string $api_version (required)
     * @param  string $newid (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#x27;HEP&#x27;. (required)
     * @param  string $version The protocol version such as &#x27;1.0&#x27; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $md5 The HMAC authentication md5 checksum (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restNewidsReadRequest($api_version, $newid, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $md5)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling restNewidsRead'
            );
        }
        // verify the required parameter 'newid' is set
        if ($newid === null || (is_array($newid) && count($newid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newid when calling restNewidsRead'
            );
        }
        // verify the required parameter 'dapp_key' is set
        if ($dapp_key === null || (is_array($dapp_key) && count($dapp_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_key when calling restNewidsRead'
            );
        }
        // verify the required parameter 'protocol' is set
        if ($protocol === null || (is_array($protocol) && count($protocol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $protocol when calling restNewidsRead'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling restNewidsRead'
            );
        }
        // verify the required parameter 'ts' is set
        if ($ts === null || (is_array($ts) && count($ts) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ts when calling restNewidsRead'
            );
        }
        // verify the required parameter 'nonce' is set
        if ($nonce === null || (is_array($nonce) && count($nonce) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nonce when calling restNewidsRead'
            );
        }
        // verify the required parameter 'os' is set
        if ($os === null || (is_array($os) && count($os) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $os when calling restNewidsRead'
            );
        }
        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling restNewidsRead'
            );
        }
        // verify the required parameter 'md5' is set
        if ($md5 === null || (is_array($md5) && count($md5) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $md5 when calling restNewidsRead'
            );
        }

        $resourcePath = '/rest/v{api_version}/newids/{newid}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dapp_key !== null) {
            $queryParams['dapp_key'] = ObjectSerializer::toQueryValue($dapp_key);
        }
        // query params
        if ($protocol !== null) {
            $queryParams['protocol'] = ObjectSerializer::toQueryValue($protocol);
        }
        // query params
        if ($version !== null) {
            $queryParams['version'] = ObjectSerializer::toQueryValue($version);
        }
        // query params
        if ($ts !== null) {
            $queryParams['ts'] = ObjectSerializer::toQueryValue($ts);
        }
        // query params
        if ($nonce !== null) {
            $queryParams['nonce'] = ObjectSerializer::toQueryValue($nonce);
        }
        // query params
        if ($os !== null) {
            $queryParams['os'] = ObjectSerializer::toQueryValue($os);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }
        // query params
        if ($md5 !== null) {
            $queryParams['md5'] = ObjectSerializer::toQueryValue($md5);
        }

        // path params
        if ($api_version !== null) {
            $resourcePath = str_replace(
                '{' . 'api_version' . '}',
                ObjectSerializer::toPathValue($api_version),
                $resourcePath
            );
        }
        // path params
        if ($newid !== null) {
            $resourcePath = str_replace(
                '{' . 'newid' . '}',
                ObjectSerializer::toPathValue($newid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restNewnetCachesAuthCreate
     *
     * @param  \Swagger\Client\Model\AuthCacheRequest $body body (required)
     * @param  string $api_version api_version (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CreateAuthCacheResponse
     */
    public function restNewnetCachesAuthCreate($body, $api_version)
    {
        list($response) = $this->restNewnetCachesAuthCreateWithHttpInfo($body, $api_version);
        return $response;
    }

    /**
     * Operation restNewnetCachesAuthCreateWithHttpInfo
     *
     * @param  \Swagger\Client\Model\AuthCacheRequest $body (required)
     * @param  string $api_version (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CreateAuthCacheResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function restNewnetCachesAuthCreateWithHttpInfo($body, $api_version)
    {
        $returnType = '\Swagger\Client\Model\CreateAuthCacheResponse';
        $request = $this->restNewnetCachesAuthCreateRequest($body, $api_version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CreateAuthCacheResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restNewnetCachesAuthCreateAsync
     *
     * 
     *
     * @param  \Swagger\Client\Model\AuthCacheRequest $body (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewnetCachesAuthCreateAsync($body, $api_version)
    {
        return $this->restNewnetCachesAuthCreateAsyncWithHttpInfo($body, $api_version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restNewnetCachesAuthCreateAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Swagger\Client\Model\AuthCacheRequest $body (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewnetCachesAuthCreateAsyncWithHttpInfo($body, $api_version)
    {
        $returnType = '\Swagger\Client\Model\CreateAuthCacheResponse';
        $request = $this->restNewnetCachesAuthCreateRequest($body, $api_version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restNewnetCachesAuthCreate'
     *
     * @param  \Swagger\Client\Model\AuthCacheRequest $body (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restNewnetCachesAuthCreateRequest($body, $api_version)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling restNewnetCachesAuthCreate'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling restNewnetCachesAuthCreate'
            );
        }

        $resourcePath = '/rest/v{api_version}/newnet/caches/auth/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($api_version !== null) {
            $resourcePath = str_replace(
                '{' . 'api_version' . '}',
                ObjectSerializer::toPathValue($api_version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restNewnetCachesAuthRead
     *
     * @param  string $api_version api_version (required)
     * @param  string $auth_hash auth_hash (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#x27;HEP&#x27;. (required)
     * @param  string $version The protocol version such as &#x27;1.0&#x27; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $md5 The HMAC authentication md5 checksum (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AuthCacheResponse
     */
    public function restNewnetCachesAuthRead($api_version, $auth_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $md5)
    {
        list($response) = $this->restNewnetCachesAuthReadWithHttpInfo($api_version, $auth_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $md5);
        return $response;
    }

    /**
     * Operation restNewnetCachesAuthReadWithHttpInfo
     *
     * @param  string $api_version (required)
     * @param  string $auth_hash (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#x27;HEP&#x27;. (required)
     * @param  string $version The protocol version such as &#x27;1.0&#x27; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $md5 The HMAC authentication md5 checksum (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AuthCacheResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function restNewnetCachesAuthReadWithHttpInfo($api_version, $auth_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $md5)
    {
        $returnType = '\Swagger\Client\Model\AuthCacheResponse';
        $request = $this->restNewnetCachesAuthReadRequest($api_version, $auth_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $md5);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AuthCacheResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restNewnetCachesAuthReadAsync
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $auth_hash (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#x27;HEP&#x27;. (required)
     * @param  string $version The protocol version such as &#x27;1.0&#x27; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $md5 The HMAC authentication md5 checksum (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewnetCachesAuthReadAsync($api_version, $auth_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $md5)
    {
        return $this->restNewnetCachesAuthReadAsyncWithHttpInfo($api_version, $auth_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $md5)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restNewnetCachesAuthReadAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $auth_hash (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#x27;HEP&#x27;. (required)
     * @param  string $version The protocol version such as &#x27;1.0&#x27; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $md5 The HMAC authentication md5 checksum (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewnetCachesAuthReadAsyncWithHttpInfo($api_version, $auth_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $md5)
    {
        $returnType = '\Swagger\Client\Model\AuthCacheResponse';
        $request = $this->restNewnetCachesAuthReadRequest($api_version, $auth_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $md5);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restNewnetCachesAuthRead'
     *
     * @param  string $api_version (required)
     * @param  string $auth_hash (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#x27;HEP&#x27;. (required)
     * @param  string $version The protocol version such as &#x27;1.0&#x27; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $md5 The HMAC authentication md5 checksum (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restNewnetCachesAuthReadRequest($api_version, $auth_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $md5)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling restNewnetCachesAuthRead'
            );
        }
        // verify the required parameter 'auth_hash' is set
        if ($auth_hash === null || (is_array($auth_hash) && count($auth_hash) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_hash when calling restNewnetCachesAuthRead'
            );
        }
        // verify the required parameter 'dapp_key' is set
        if ($dapp_key === null || (is_array($dapp_key) && count($dapp_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_key when calling restNewnetCachesAuthRead'
            );
        }
        // verify the required parameter 'protocol' is set
        if ($protocol === null || (is_array($protocol) && count($protocol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $protocol when calling restNewnetCachesAuthRead'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling restNewnetCachesAuthRead'
            );
        }
        // verify the required parameter 'ts' is set
        if ($ts === null || (is_array($ts) && count($ts) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ts when calling restNewnetCachesAuthRead'
            );
        }
        // verify the required parameter 'nonce' is set
        if ($nonce === null || (is_array($nonce) && count($nonce) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nonce when calling restNewnetCachesAuthRead'
            );
        }
        // verify the required parameter 'os' is set
        if ($os === null || (is_array($os) && count($os) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $os when calling restNewnetCachesAuthRead'
            );
        }
        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling restNewnetCachesAuthRead'
            );
        }
        // verify the required parameter 'md5' is set
        if ($md5 === null || (is_array($md5) && count($md5) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $md5 when calling restNewnetCachesAuthRead'
            );
        }

        $resourcePath = '/rest/v{api_version}/newnet/caches/auth/{auth_hash}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dapp_key !== null) {
            $queryParams['dapp_key'] = ObjectSerializer::toQueryValue($dapp_key);
        }
        // query params
        if ($protocol !== null) {
            $queryParams['protocol'] = ObjectSerializer::toQueryValue($protocol);
        }
        // query params
        if ($version !== null) {
            $queryParams['version'] = ObjectSerializer::toQueryValue($version);
        }
        // query params
        if ($ts !== null) {
            $queryParams['ts'] = ObjectSerializer::toQueryValue($ts);
        }
        // query params
        if ($nonce !== null) {
            $queryParams['nonce'] = ObjectSerializer::toQueryValue($nonce);
        }
        // query params
        if ($os !== null) {
            $queryParams['os'] = ObjectSerializer::toQueryValue($os);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }
        // query params
        if ($md5 !== null) {
            $queryParams['md5'] = ObjectSerializer::toQueryValue($md5);
        }

        // path params
        if ($api_version !== null) {
            $resourcePath = str_replace(
                '{' . 'api_version' . '}',
                ObjectSerializer::toPathValue($api_version),
                $resourcePath
            );
        }
        // path params
        if ($auth_hash !== null) {
            $resourcePath = str_replace(
                '{' . 'auth_hash' . '}',
                ObjectSerializer::toPathValue($auth_hash),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restNewnetCachesPayCreate
     *
     * @param  \Swagger\Client\Model\PayCacheRequest $body body (required)
     * @param  string $api_version api_version (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CreatePayCacheResponse
     */
    public function restNewnetCachesPayCreate($body, $api_version)
    {
        list($response) = $this->restNewnetCachesPayCreateWithHttpInfo($body, $api_version);
        return $response;
    }

    /**
     * Operation restNewnetCachesPayCreateWithHttpInfo
     *
     * @param  \Swagger\Client\Model\PayCacheRequest $body (required)
     * @param  string $api_version (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CreatePayCacheResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function restNewnetCachesPayCreateWithHttpInfo($body, $api_version)
    {
        $returnType = '\Swagger\Client\Model\CreatePayCacheResponse';
        $request = $this->restNewnetCachesPayCreateRequest($body, $api_version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CreatePayCacheResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restNewnetCachesPayCreateAsync
     *
     * 
     *
     * @param  \Swagger\Client\Model\PayCacheRequest $body (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewnetCachesPayCreateAsync($body, $api_version)
    {
        return $this->restNewnetCachesPayCreateAsyncWithHttpInfo($body, $api_version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restNewnetCachesPayCreateAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Swagger\Client\Model\PayCacheRequest $body (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewnetCachesPayCreateAsyncWithHttpInfo($body, $api_version)
    {
        $returnType = '\Swagger\Client\Model\CreatePayCacheResponse';
        $request = $this->restNewnetCachesPayCreateRequest($body, $api_version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restNewnetCachesPayCreate'
     *
     * @param  \Swagger\Client\Model\PayCacheRequest $body (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restNewnetCachesPayCreateRequest($body, $api_version)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling restNewnetCachesPayCreate'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling restNewnetCachesPayCreate'
            );
        }

        $resourcePath = '/rest/v{api_version}/newnet/caches/pay/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($api_version !== null) {
            $resourcePath = str_replace(
                '{' . 'api_version' . '}',
                ObjectSerializer::toPathValue($api_version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restNewnetCachesPayRead
     *
     * @param  string $api_version api_version (required)
     * @param  string $pay_hash pay_hash (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#x27;HEP&#x27;. (required)
     * @param  string $version The protocol version such as &#x27;1.0&#x27; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $md5 The HMAC authentication md5 checksum (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PayCacheResponse
     */
    public function restNewnetCachesPayRead($api_version, $pay_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $md5)
    {
        list($response) = $this->restNewnetCachesPayReadWithHttpInfo($api_version, $pay_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $md5);
        return $response;
    }

    /**
     * Operation restNewnetCachesPayReadWithHttpInfo
     *
     * @param  string $api_version (required)
     * @param  string $pay_hash (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#x27;HEP&#x27;. (required)
     * @param  string $version The protocol version such as &#x27;1.0&#x27; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $md5 The HMAC authentication md5 checksum (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PayCacheResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function restNewnetCachesPayReadWithHttpInfo($api_version, $pay_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $md5)
    {
        $returnType = '\Swagger\Client\Model\PayCacheResponse';
        $request = $this->restNewnetCachesPayReadRequest($api_version, $pay_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $md5);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PayCacheResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restNewnetCachesPayReadAsync
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $pay_hash (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#x27;HEP&#x27;. (required)
     * @param  string $version The protocol version such as &#x27;1.0&#x27; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $md5 The HMAC authentication md5 checksum (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewnetCachesPayReadAsync($api_version, $pay_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $md5)
    {
        return $this->restNewnetCachesPayReadAsyncWithHttpInfo($api_version, $pay_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $md5)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restNewnetCachesPayReadAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $api_version (required)
     * @param  string $pay_hash (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#x27;HEP&#x27;. (required)
     * @param  string $version The protocol version such as &#x27;1.0&#x27; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $md5 The HMAC authentication md5 checksum (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restNewnetCachesPayReadAsyncWithHttpInfo($api_version, $pay_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $md5)
    {
        $returnType = '\Swagger\Client\Model\PayCacheResponse';
        $request = $this->restNewnetCachesPayReadRequest($api_version, $pay_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $md5);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restNewnetCachesPayRead'
     *
     * @param  string $api_version (required)
     * @param  string $pay_hash (required)
     * @param  string $dapp_key The decentralized application access key (required)
     * @param  string $protocol The protocol name. default is &#x27;HEP&#x27;. (required)
     * @param  string $version The protocol version such as &#x27;1.0&#x27; (required)
     * @param  int $ts The current timestamp (required)
     * @param  string $nonce The random string or auto-increment sequence (required)
     * @param  string $os The operating system of client such as ios, android, dweb,etc. (required)
     * @param  string $language The i18n language code such as zh, en, etc. (required)
     * @param  string $md5 The HMAC authentication md5 checksum (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restNewnetCachesPayReadRequest($api_version, $pay_hash, $dapp_key, $protocol, $version, $ts, $nonce, $os, $language, $md5)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling restNewnetCachesPayRead'
            );
        }
        // verify the required parameter 'pay_hash' is set
        if ($pay_hash === null || (is_array($pay_hash) && count($pay_hash) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_hash when calling restNewnetCachesPayRead'
            );
        }
        // verify the required parameter 'dapp_key' is set
        if ($dapp_key === null || (is_array($dapp_key) && count($dapp_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dapp_key when calling restNewnetCachesPayRead'
            );
        }
        // verify the required parameter 'protocol' is set
        if ($protocol === null || (is_array($protocol) && count($protocol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $protocol when calling restNewnetCachesPayRead'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling restNewnetCachesPayRead'
            );
        }
        // verify the required parameter 'ts' is set
        if ($ts === null || (is_array($ts) && count($ts) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ts when calling restNewnetCachesPayRead'
            );
        }
        // verify the required parameter 'nonce' is set
        if ($nonce === null || (is_array($nonce) && count($nonce) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nonce when calling restNewnetCachesPayRead'
            );
        }
        // verify the required parameter 'os' is set
        if ($os === null || (is_array($os) && count($os) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $os when calling restNewnetCachesPayRead'
            );
        }
        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling restNewnetCachesPayRead'
            );
        }
        // verify the required parameter 'md5' is set
        if ($md5 === null || (is_array($md5) && count($md5) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $md5 when calling restNewnetCachesPayRead'
            );
        }

        $resourcePath = '/rest/v{api_version}/newnet/caches/pay/{pay_hash}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dapp_key !== null) {
            $queryParams['dapp_key'] = ObjectSerializer::toQueryValue($dapp_key);
        }
        // query params
        if ($protocol !== null) {
            $queryParams['protocol'] = ObjectSerializer::toQueryValue($protocol);
        }
        // query params
        if ($version !== null) {
            $queryParams['version'] = ObjectSerializer::toQueryValue($version);
        }
        // query params
        if ($ts !== null) {
            $queryParams['ts'] = ObjectSerializer::toQueryValue($ts);
        }
        // query params
        if ($nonce !== null) {
            $queryParams['nonce'] = ObjectSerializer::toQueryValue($nonce);
        }
        // query params
        if ($os !== null) {
            $queryParams['os'] = ObjectSerializer::toQueryValue($os);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }
        // query params
        if ($md5 !== null) {
            $queryParams['md5'] = ObjectSerializer::toQueryValue($md5);
        }

        // path params
        if ($api_version !== null) {
            $resourcePath = str_replace(
                '{' . 'api_version' . '}',
                ObjectSerializer::toPathValue($api_version),
                $resourcePath
            );
        }
        // path params
        if ($pay_hash !== null) {
            $resourcePath = str_replace(
                '{' . 'pay_hash' . '}',
                ObjectSerializer::toPathValue($pay_hash),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restProofsCreate
     *
     * @param  \Swagger\Client\Model\CreateProofRequest $body body (required)
     * @param  string $api_version api_version (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CreateProofResponse
     */
    public function restProofsCreate($body, $api_version)
    {
        list($response) = $this->restProofsCreateWithHttpInfo($body, $api_version);
        return $response;
    }

    /**
     * Operation restProofsCreateWithHttpInfo
     *
     * @param  \Swagger\Client\Model\CreateProofRequest $body (required)
     * @param  string $api_version (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CreateProofResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function restProofsCreateWithHttpInfo($body, $api_version)
    {
        $returnType = '\Swagger\Client\Model\CreateProofResponse';
        $request = $this->restProofsCreateRequest($body, $api_version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CreateProofResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restProofsCreateAsync
     *
     * 
     *
     * @param  \Swagger\Client\Model\CreateProofRequest $body (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restProofsCreateAsync($body, $api_version)
    {
        return $this->restProofsCreateAsyncWithHttpInfo($body, $api_version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restProofsCreateAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Swagger\Client\Model\CreateProofRequest $body (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restProofsCreateAsyncWithHttpInfo($body, $api_version)
    {
        $returnType = '\Swagger\Client\Model\CreateProofResponse';
        $request = $this->restProofsCreateRequest($body, $api_version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restProofsCreate'
     *
     * @param  \Swagger\Client\Model\CreateProofRequest $body (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restProofsCreateRequest($body, $api_version)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling restProofsCreate'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling restProofsCreate'
            );
        }

        $resourcePath = '/rest/v{api_version}/proofs/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($api_version !== null) {
            $resourcePath = str_replace(
                '{' . 'api_version' . '}',
                ObjectSerializer::toPathValue($api_version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restProofsDelete
     *
     * @param  \Swagger\Client\Model\CancelProofRequest $body body (required)
     * @param  string $api_version api_version (required)
     * @param  string $proof_hash proof_hash (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CancelProofResponse
     */
    public function restProofsDelete($body, $api_version, $proof_hash)
    {
        list($response) = $this->restProofsDeleteWithHttpInfo($body, $api_version, $proof_hash);
        return $response;
    }

    /**
     * Operation restProofsDeleteWithHttpInfo
     *
     * @param  \Swagger\Client\Model\CancelProofRequest $body (required)
     * @param  string $api_version (required)
     * @param  string $proof_hash (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CancelProofResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function restProofsDeleteWithHttpInfo($body, $api_version, $proof_hash)
    {
        $returnType = '\Swagger\Client\Model\CancelProofResponse';
        $request = $this->restProofsDeleteRequest($body, $api_version, $proof_hash);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CancelProofResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restProofsDeleteAsync
     *
     * 
     *
     * @param  \Swagger\Client\Model\CancelProofRequest $body (required)
     * @param  string $api_version (required)
     * @param  string $proof_hash (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restProofsDeleteAsync($body, $api_version, $proof_hash)
    {
        return $this->restProofsDeleteAsyncWithHttpInfo($body, $api_version, $proof_hash)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restProofsDeleteAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Swagger\Client\Model\CancelProofRequest $body (required)
     * @param  string $api_version (required)
     * @param  string $proof_hash (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restProofsDeleteAsyncWithHttpInfo($body, $api_version, $proof_hash)
    {
        $returnType = '\Swagger\Client\Model\CancelProofResponse';
        $request = $this->restProofsDeleteRequest($body, $api_version, $proof_hash);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restProofsDelete'
     *
     * @param  \Swagger\Client\Model\CancelProofRequest $body (required)
     * @param  string $api_version (required)
     * @param  string $proof_hash (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restProofsDeleteRequest($body, $api_version, $proof_hash)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling restProofsDelete'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling restProofsDelete'
            );
        }
        // verify the required parameter 'proof_hash' is set
        if ($proof_hash === null || (is_array($proof_hash) && count($proof_hash) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proof_hash when calling restProofsDelete'
            );
        }

        $resourcePath = '/rest/v{api_version}/proofs/{proof_hash}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($api_version !== null) {
            $resourcePath = str_replace(
                '{' . 'api_version' . '}',
                ObjectSerializer::toPathValue($api_version),
                $resourcePath
            );
        }
        // path params
        if ($proof_hash !== null) {
            $resourcePath = str_replace(
                '{' . 'proof_hash' . '}',
                ObjectSerializer::toPathValue($proof_hash),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
