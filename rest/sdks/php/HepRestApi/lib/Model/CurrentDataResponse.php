<?php
/**
 * CurrentDataResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  HepRestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * HEP REST API
 *
 * The REST API for HEP protocol
 *
 * OpenAPI spec version: v1
 * Contact: xiawu@zeuux.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.7
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace HepRestApi\Model;

use \ArrayAccess;
use \HepRestApi\ObjectSerializer;

/**
 * CurrentDataResponse Class Doc Comment
 *
 * @category Class
 * @package  HepRestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CurrentDataResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CurrentDataResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'start_timestamp' => 'int',
        'end_timestamp' => 'int',
        'remaining_days' => 'int',
        'locked_days' => 'int',
        'minted_days' => 'int',
        'collected_tokens' => 'string',
        'collect_status' => 'int',
        'can_collect_tokens' => 'string',
        'in_minting_gravity' => 'string',
        'current_minting_stage' => 'int',
        'current_collect_stage' => 'int',
        'total_minting_stages' => 'int',
        'released_tokens' => 'string',
        'locked_tokens' => 'string',
        'total_mint_amount' => 'string',
        'total_exchange_tokens' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'start_timestamp' => null,
        'end_timestamp' => null,
        'remaining_days' => null,
        'locked_days' => null,
        'minted_days' => null,
        'collected_tokens' => null,
        'collect_status' => null,
        'can_collect_tokens' => null,
        'in_minting_gravity' => null,
        'current_minting_stage' => null,
        'current_collect_stage' => null,
        'total_minting_stages' => null,
        'released_tokens' => null,
        'locked_tokens' => null,
        'total_mint_amount' => null,
        'total_exchange_tokens' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'start_timestamp' => 'start_timestamp',
        'end_timestamp' => 'end_timestamp',
        'remaining_days' => 'remaining_days',
        'locked_days' => 'locked_days',
        'minted_days' => 'minted_days',
        'collected_tokens' => 'collected_tokens',
        'collect_status' => 'collect_status',
        'can_collect_tokens' => 'can_collect_tokens',
        'in_minting_gravity' => 'in_minting_gravity',
        'current_minting_stage' => 'current_minting_stage',
        'current_collect_stage' => 'current_collect_stage',
        'total_minting_stages' => 'total_minting_stages',
        'released_tokens' => 'released_tokens',
        'locked_tokens' => 'locked_tokens',
        'total_mint_amount' => 'total_mint_amount',
        'total_exchange_tokens' => 'total_exchange_tokens'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'start_timestamp' => 'setStartTimestamp',
        'end_timestamp' => 'setEndTimestamp',
        'remaining_days' => 'setRemainingDays',
        'locked_days' => 'setLockedDays',
        'minted_days' => 'setMintedDays',
        'collected_tokens' => 'setCollectedTokens',
        'collect_status' => 'setCollectStatus',
        'can_collect_tokens' => 'setCanCollectTokens',
        'in_minting_gravity' => 'setInMintingGravity',
        'current_minting_stage' => 'setCurrentMintingStage',
        'current_collect_stage' => 'setCurrentCollectStage',
        'total_minting_stages' => 'setTotalMintingStages',
        'released_tokens' => 'setReleasedTokens',
        'locked_tokens' => 'setLockedTokens',
        'total_mint_amount' => 'setTotalMintAmount',
        'total_exchange_tokens' => 'setTotalExchangeTokens'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'start_timestamp' => 'getStartTimestamp',
        'end_timestamp' => 'getEndTimestamp',
        'remaining_days' => 'getRemainingDays',
        'locked_days' => 'getLockedDays',
        'minted_days' => 'getMintedDays',
        'collected_tokens' => 'getCollectedTokens',
        'collect_status' => 'getCollectStatus',
        'can_collect_tokens' => 'getCanCollectTokens',
        'in_minting_gravity' => 'getInMintingGravity',
        'current_minting_stage' => 'getCurrentMintingStage',
        'current_collect_stage' => 'getCurrentCollectStage',
        'total_minting_stages' => 'getTotalMintingStages',
        'released_tokens' => 'getReleasedTokens',
        'locked_tokens' => 'getLockedTokens',
        'total_mint_amount' => 'getTotalMintAmount',
        'total_exchange_tokens' => 'getTotalExchangeTokens'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['start_timestamp'] = isset($data['start_timestamp']) ? $data['start_timestamp'] : null;
        $this->container['end_timestamp'] = isset($data['end_timestamp']) ? $data['end_timestamp'] : null;
        $this->container['remaining_days'] = isset($data['remaining_days']) ? $data['remaining_days'] : null;
        $this->container['locked_days'] = isset($data['locked_days']) ? $data['locked_days'] : null;
        $this->container['minted_days'] = isset($data['minted_days']) ? $data['minted_days'] : null;
        $this->container['collected_tokens'] = isset($data['collected_tokens']) ? $data['collected_tokens'] : null;
        $this->container['collect_status'] = isset($data['collect_status']) ? $data['collect_status'] : null;
        $this->container['can_collect_tokens'] = isset($data['can_collect_tokens']) ? $data['can_collect_tokens'] : null;
        $this->container['in_minting_gravity'] = isset($data['in_minting_gravity']) ? $data['in_minting_gravity'] : null;
        $this->container['current_minting_stage'] = isset($data['current_minting_stage']) ? $data['current_minting_stage'] : null;
        $this->container['current_collect_stage'] = isset($data['current_collect_stage']) ? $data['current_collect_stage'] : null;
        $this->container['total_minting_stages'] = isset($data['total_minting_stages']) ? $data['total_minting_stages'] : null;
        $this->container['released_tokens'] = isset($data['released_tokens']) ? $data['released_tokens'] : null;
        $this->container['locked_tokens'] = isset($data['locked_tokens']) ? $data['locked_tokens'] : null;
        $this->container['total_mint_amount'] = isset($data['total_mint_amount']) ? $data['total_mint_amount'] : null;
        $this->container['total_exchange_tokens'] = isset($data['total_exchange_tokens']) ? $data['total_exchange_tokens'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['start_timestamp'] === null) {
            $invalidProperties[] = "'start_timestamp' can't be null";
        }
        if ($this->container['end_timestamp'] === null) {
            $invalidProperties[] = "'end_timestamp' can't be null";
        }
        if ($this->container['remaining_days'] === null) {
            $invalidProperties[] = "'remaining_days' can't be null";
        }
        if ($this->container['locked_days'] === null) {
            $invalidProperties[] = "'locked_days' can't be null";
        }
        if ($this->container['minted_days'] === null) {
            $invalidProperties[] = "'minted_days' can't be null";
        }
        if ($this->container['collected_tokens'] === null) {
            $invalidProperties[] = "'collected_tokens' can't be null";
        }
        if ((mb_strlen($this->container['collected_tokens']) > 32)) {
            $invalidProperties[] = "invalid value for 'collected_tokens', the character length must be smaller than or equal to 32.";
        }

        if ((mb_strlen($this->container['collected_tokens']) < 1)) {
            $invalidProperties[] = "invalid value for 'collected_tokens', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['collect_status'] === null) {
            $invalidProperties[] = "'collect_status' can't be null";
        }
        if ($this->container['can_collect_tokens'] === null) {
            $invalidProperties[] = "'can_collect_tokens' can't be null";
        }
        if ((mb_strlen($this->container['can_collect_tokens']) > 32)) {
            $invalidProperties[] = "invalid value for 'can_collect_tokens', the character length must be smaller than or equal to 32.";
        }

        if ((mb_strlen($this->container['can_collect_tokens']) < 1)) {
            $invalidProperties[] = "invalid value for 'can_collect_tokens', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['in_minting_gravity'] === null) {
            $invalidProperties[] = "'in_minting_gravity' can't be null";
        }
        if ((mb_strlen($this->container['in_minting_gravity']) > 32)) {
            $invalidProperties[] = "invalid value for 'in_minting_gravity', the character length must be smaller than or equal to 32.";
        }

        if ((mb_strlen($this->container['in_minting_gravity']) < 1)) {
            $invalidProperties[] = "invalid value for 'in_minting_gravity', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['current_minting_stage'] === null) {
            $invalidProperties[] = "'current_minting_stage' can't be null";
        }
        if ($this->container['current_collect_stage'] === null) {
            $invalidProperties[] = "'current_collect_stage' can't be null";
        }
        if ($this->container['total_minting_stages'] === null) {
            $invalidProperties[] = "'total_minting_stages' can't be null";
        }
        if ($this->container['released_tokens'] === null) {
            $invalidProperties[] = "'released_tokens' can't be null";
        }
        if ((mb_strlen($this->container['released_tokens']) > 32)) {
            $invalidProperties[] = "invalid value for 'released_tokens', the character length must be smaller than or equal to 32.";
        }

        if ((mb_strlen($this->container['released_tokens']) < 1)) {
            $invalidProperties[] = "invalid value for 'released_tokens', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['locked_tokens'] === null) {
            $invalidProperties[] = "'locked_tokens' can't be null";
        }
        if ((mb_strlen($this->container['locked_tokens']) > 32)) {
            $invalidProperties[] = "invalid value for 'locked_tokens', the character length must be smaller than or equal to 32.";
        }

        if ((mb_strlen($this->container['locked_tokens']) < 1)) {
            $invalidProperties[] = "invalid value for 'locked_tokens', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['total_mint_amount'] === null) {
            $invalidProperties[] = "'total_mint_amount' can't be null";
        }
        if ((mb_strlen($this->container['total_mint_amount']) > 32)) {
            $invalidProperties[] = "invalid value for 'total_mint_amount', the character length must be smaller than or equal to 32.";
        }

        if ((mb_strlen($this->container['total_mint_amount']) < 1)) {
            $invalidProperties[] = "invalid value for 'total_mint_amount', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['total_exchange_tokens'] === null) {
            $invalidProperties[] = "'total_exchange_tokens' can't be null";
        }
        if ((mb_strlen($this->container['total_exchange_tokens']) > 32)) {
            $invalidProperties[] = "invalid value for 'total_exchange_tokens', the character length must be smaller than or equal to 32.";
        }

        if ((mb_strlen($this->container['total_exchange_tokens']) < 1)) {
            $invalidProperties[] = "invalid value for 'total_exchange_tokens', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets start_timestamp
     *
     * @return int
     */
    public function getStartTimestamp()
    {
        return $this->container['start_timestamp'];
    }

    /**
     * Sets start_timestamp
     *
     * @param int $start_timestamp Start timestamp
     *
     * @return $this
     */
    public function setStartTimestamp($start_timestamp)
    {
        $this->container['start_timestamp'] = $start_timestamp;

        return $this;
    }

    /**
     * Gets end_timestamp
     *
     * @return int
     */
    public function getEndTimestamp()
    {
        return $this->container['end_timestamp'];
    }

    /**
     * Sets end_timestamp
     *
     * @param int $end_timestamp End timestamp
     *
     * @return $this
     */
    public function setEndTimestamp($end_timestamp)
    {
        $this->container['end_timestamp'] = $end_timestamp;

        return $this;
    }

    /**
     * Gets remaining_days
     *
     * @return int
     */
    public function getRemainingDays()
    {
        return $this->container['remaining_days'];
    }

    /**
     * Sets remaining_days
     *
     * @param int $remaining_days Remaining minting days
     *
     * @return $this
     */
    public function setRemainingDays($remaining_days)
    {
        $this->container['remaining_days'] = $remaining_days;

        return $this;
    }

    /**
     * Gets locked_days
     *
     * @return int
     */
    public function getLockedDays()
    {
        return $this->container['locked_days'];
    }

    /**
     * Sets locked_days
     *
     * @param int $locked_days Locked days
     *
     * @return $this
     */
    public function setLockedDays($locked_days)
    {
        $this->container['locked_days'] = $locked_days;

        return $this;
    }

    /**
     * Gets minted_days
     *
     * @return int
     */
    public function getMintedDays()
    {
        return $this->container['minted_days'];
    }

    /**
     * Sets minted_days
     *
     * @param int $minted_days Minted days
     *
     * @return $this
     */
    public function setMintedDays($minted_days)
    {
        $this->container['minted_days'] = $minted_days;

        return $this;
    }

    /**
     * Gets collected_tokens
     *
     * @return string
     */
    public function getCollectedTokens()
    {
        return $this->container['collected_tokens'];
    }

    /**
     * Sets collected_tokens
     *
     * @param string $collected_tokens Tokens that has been collected
     *
     * @return $this
     */
    public function setCollectedTokens($collected_tokens)
    {
        if ((mb_strlen($collected_tokens) > 32)) {
            throw new \InvalidArgumentException('invalid length for $collected_tokens when calling CurrentDataResponse., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($collected_tokens) < 1)) {
            throw new \InvalidArgumentException('invalid length for $collected_tokens when calling CurrentDataResponse., must be bigger than or equal to 1.');
        }

        $this->container['collected_tokens'] = $collected_tokens;

        return $this;
    }

    /**
     * Gets collect_status
     *
     * @return int
     */
    public function getCollectStatus()
    {
        return $this->container['collect_status'];
    }

    /**
     * Sets collect_status
     *
     * @param int $collect_status Status of mint
     *
     * @return $this
     */
    public function setCollectStatus($collect_status)
    {
        $this->container['collect_status'] = $collect_status;

        return $this;
    }

    /**
     * Gets can_collect_tokens
     *
     * @return string
     */
    public function getCanCollectTokens()
    {
        return $this->container['can_collect_tokens'];
    }

    /**
     * Sets can_collect_tokens
     *
     * @param string $can_collect_tokens Tokens that waiting for collected
     *
     * @return $this
     */
    public function setCanCollectTokens($can_collect_tokens)
    {
        if ((mb_strlen($can_collect_tokens) > 32)) {
            throw new \InvalidArgumentException('invalid length for $can_collect_tokens when calling CurrentDataResponse., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($can_collect_tokens) < 1)) {
            throw new \InvalidArgumentException('invalid length for $can_collect_tokens when calling CurrentDataResponse., must be bigger than or equal to 1.');
        }

        $this->container['can_collect_tokens'] = $can_collect_tokens;

        return $this;
    }

    /**
     * Gets in_minting_gravity
     *
     * @return string
     */
    public function getInMintingGravity()
    {
        return $this->container['in_minting_gravity'];
    }

    /**
     * Sets in_minting_gravity
     *
     * @param string $in_minting_gravity In minting GRV
     *
     * @return $this
     */
    public function setInMintingGravity($in_minting_gravity)
    {
        if ((mb_strlen($in_minting_gravity) > 32)) {
            throw new \InvalidArgumentException('invalid length for $in_minting_gravity when calling CurrentDataResponse., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($in_minting_gravity) < 1)) {
            throw new \InvalidArgumentException('invalid length for $in_minting_gravity when calling CurrentDataResponse., must be bigger than or equal to 1.');
        }

        $this->container['in_minting_gravity'] = $in_minting_gravity;

        return $this;
    }

    /**
     * Gets current_minting_stage
     *
     * @return int
     */
    public function getCurrentMintingStage()
    {
        return $this->container['current_minting_stage'];
    }

    /**
     * Sets current_minting_stage
     *
     * @param int $current_minting_stage Stage of current minting
     *
     * @return $this
     */
    public function setCurrentMintingStage($current_minting_stage)
    {
        $this->container['current_minting_stage'] = $current_minting_stage;

        return $this;
    }

    /**
     * Gets current_collect_stage
     *
     * @return int
     */
    public function getCurrentCollectStage()
    {
        return $this->container['current_collect_stage'];
    }

    /**
     * Sets current_collect_stage
     *
     * @param int $current_collect_stage Stage of current collect
     *
     * @return $this
     */
    public function setCurrentCollectStage($current_collect_stage)
    {
        $this->container['current_collect_stage'] = $current_collect_stage;

        return $this;
    }

    /**
     * Gets total_minting_stages
     *
     * @return int
     */
    public function getTotalMintingStages()
    {
        return $this->container['total_minting_stages'];
    }

    /**
     * Sets total_minting_stages
     *
     * @param int $total_minting_stages total stages of minting
     *
     * @return $this
     */
    public function setTotalMintingStages($total_minting_stages)
    {
        $this->container['total_minting_stages'] = $total_minting_stages;

        return $this;
    }

    /**
     * Gets released_tokens
     *
     * @return string
     */
    public function getReleasedTokens()
    {
        return $this->container['released_tokens'];
    }

    /**
     * Sets released_tokens
     *
     * @param string $released_tokens released tokens
     *
     * @return $this
     */
    public function setReleasedTokens($released_tokens)
    {
        if ((mb_strlen($released_tokens) > 32)) {
            throw new \InvalidArgumentException('invalid length for $released_tokens when calling CurrentDataResponse., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($released_tokens) < 1)) {
            throw new \InvalidArgumentException('invalid length for $released_tokens when calling CurrentDataResponse., must be bigger than or equal to 1.');
        }

        $this->container['released_tokens'] = $released_tokens;

        return $this;
    }

    /**
     * Gets locked_tokens
     *
     * @return string
     */
    public function getLockedTokens()
    {
        return $this->container['locked_tokens'];
    }

    /**
     * Sets locked_tokens
     *
     * @param string $locked_tokens locked tokens currently
     *
     * @return $this
     */
    public function setLockedTokens($locked_tokens)
    {
        if ((mb_strlen($locked_tokens) > 32)) {
            throw new \InvalidArgumentException('invalid length for $locked_tokens when calling CurrentDataResponse., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($locked_tokens) < 1)) {
            throw new \InvalidArgumentException('invalid length for $locked_tokens when calling CurrentDataResponse., must be bigger than or equal to 1.');
        }

        $this->container['locked_tokens'] = $locked_tokens;

        return $this;
    }

    /**
     * Gets total_mint_amount
     *
     * @return string
     */
    public function getTotalMintAmount()
    {
        return $this->container['total_mint_amount'];
    }

    /**
     * Sets total_mint_amount
     *
     * @param string $total_mint_amount locked GRV of this minting
     *
     * @return $this
     */
    public function setTotalMintAmount($total_mint_amount)
    {
        if ((mb_strlen($total_mint_amount) > 32)) {
            throw new \InvalidArgumentException('invalid length for $total_mint_amount when calling CurrentDataResponse., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($total_mint_amount) < 1)) {
            throw new \InvalidArgumentException('invalid length for $total_mint_amount when calling CurrentDataResponse., must be bigger than or equal to 1.');
        }

        $this->container['total_mint_amount'] = $total_mint_amount;

        return $this;
    }

    /**
     * Gets total_exchange_tokens
     *
     * @return string
     */
    public function getTotalExchangeTokens()
    {
        return $this->container['total_exchange_tokens'];
    }

    /**
     * Sets total_exchange_tokens
     *
     * @param string $total_exchange_tokens exchange NEW of this minting
     *
     * @return $this
     */
    public function setTotalExchangeTokens($total_exchange_tokens)
    {
        if ((mb_strlen($total_exchange_tokens) > 32)) {
            throw new \InvalidArgumentException('invalid length for $total_exchange_tokens when calling CurrentDataResponse., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($total_exchange_tokens) < 1)) {
            throw new \InvalidArgumentException('invalid length for $total_exchange_tokens when calling CurrentDataResponse., must be bigger than or equal to 1.');
        }

        $this->container['total_exchange_tokens'] = $total_exchange_tokens;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


