<?php
/**
 * HistoryData
 *
 * PHP version 5
 *
 * @category Class
 * @package  HepRestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * HEP REST API
 *
 * The REST API for HEP protocol
 *
 * OpenAPI spec version: v1
 * Contact: xiawu@zeuux.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.7
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace HepRestApi\Model;

use \ArrayAccess;
use \HepRestApi\ObjectSerializer;

/**
 * HistoryData Class Doc Comment
 *
 * @category Class
 * @package  HepRestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HistoryData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'HistoryData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'start_timestamp' => 'int',
        'end_timestamp' => 'int',
        'locked_days' => 'int',
        'minted_gravity' => 'string',
        'locked_tokens' => 'string',
        'collected_tokens' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'start_timestamp' => null,
        'end_timestamp' => null,
        'locked_days' => null,
        'minted_gravity' => null,
        'locked_tokens' => null,
        'collected_tokens' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'start_timestamp' => 'start_timestamp',
        'end_timestamp' => 'end_timestamp',
        'locked_days' => 'locked_days',
        'minted_gravity' => 'minted_gravity',
        'locked_tokens' => 'locked_tokens',
        'collected_tokens' => 'collected_tokens'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'start_timestamp' => 'setStartTimestamp',
        'end_timestamp' => 'setEndTimestamp',
        'locked_days' => 'setLockedDays',
        'minted_gravity' => 'setMintedGravity',
        'locked_tokens' => 'setLockedTokens',
        'collected_tokens' => 'setCollectedTokens'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'start_timestamp' => 'getStartTimestamp',
        'end_timestamp' => 'getEndTimestamp',
        'locked_days' => 'getLockedDays',
        'minted_gravity' => 'getMintedGravity',
        'locked_tokens' => 'getLockedTokens',
        'collected_tokens' => 'getCollectedTokens'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['start_timestamp'] = isset($data['start_timestamp']) ? $data['start_timestamp'] : null;
        $this->container['end_timestamp'] = isset($data['end_timestamp']) ? $data['end_timestamp'] : null;
        $this->container['locked_days'] = isset($data['locked_days']) ? $data['locked_days'] : null;
        $this->container['minted_gravity'] = isset($data['minted_gravity']) ? $data['minted_gravity'] : null;
        $this->container['locked_tokens'] = isset($data['locked_tokens']) ? $data['locked_tokens'] : null;
        $this->container['collected_tokens'] = isset($data['collected_tokens']) ? $data['collected_tokens'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['start_timestamp'] === null) {
            $invalidProperties[] = "'start_timestamp' can't be null";
        }
        if ($this->container['end_timestamp'] === null) {
            $invalidProperties[] = "'end_timestamp' can't be null";
        }
        if ($this->container['locked_days'] === null) {
            $invalidProperties[] = "'locked_days' can't be null";
        }
        if ($this->container['minted_gravity'] === null) {
            $invalidProperties[] = "'minted_gravity' can't be null";
        }
        if ((mb_strlen($this->container['minted_gravity']) < 1)) {
            $invalidProperties[] = "invalid value for 'minted_gravity', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['locked_tokens'] === null) {
            $invalidProperties[] = "'locked_tokens' can't be null";
        }
        if ((mb_strlen($this->container['locked_tokens']) > 32)) {
            $invalidProperties[] = "invalid value for 'locked_tokens', the character length must be smaller than or equal to 32.";
        }

        if ((mb_strlen($this->container['locked_tokens']) < 1)) {
            $invalidProperties[] = "invalid value for 'locked_tokens', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['collected_tokens'] === null) {
            $invalidProperties[] = "'collected_tokens' can't be null";
        }
        if ((mb_strlen($this->container['collected_tokens']) > 32)) {
            $invalidProperties[] = "invalid value for 'collected_tokens', the character length must be smaller than or equal to 32.";
        }

        if ((mb_strlen($this->container['collected_tokens']) < 1)) {
            $invalidProperties[] = "invalid value for 'collected_tokens', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets start_timestamp
     *
     * @return int
     */
    public function getStartTimestamp()
    {
        return $this->container['start_timestamp'];
    }

    /**
     * Sets start_timestamp
     *
     * @param int $start_timestamp Start timestamp
     *
     * @return $this
     */
    public function setStartTimestamp($start_timestamp)
    {
        $this->container['start_timestamp'] = $start_timestamp;

        return $this;
    }

    /**
     * Gets end_timestamp
     *
     * @return int
     */
    public function getEndTimestamp()
    {
        return $this->container['end_timestamp'];
    }

    /**
     * Sets end_timestamp
     *
     * @param int $end_timestamp End timestamp
     *
     * @return $this
     */
    public function setEndTimestamp($end_timestamp)
    {
        $this->container['end_timestamp'] = $end_timestamp;

        return $this;
    }

    /**
     * Gets locked_days
     *
     * @return int
     */
    public function getLockedDays()
    {
        return $this->container['locked_days'];
    }

    /**
     * Sets locked_days
     *
     * @param int $locked_days Locked days
     *
     * @return $this
     */
    public function setLockedDays($locked_days)
    {
        $this->container['locked_days'] = $locked_days;

        return $this;
    }

    /**
     * Gets minted_gravity
     *
     * @return string
     */
    public function getMintedGravity()
    {
        return $this->container['minted_gravity'];
    }

    /**
     * Sets minted_gravity
     *
     * @param string $minted_gravity minted gravity
     *
     * @return $this
     */
    public function setMintedGravity($minted_gravity)
    {

        if ((mb_strlen($minted_gravity) < 1)) {
            throw new \InvalidArgumentException('invalid length for $minted_gravity when calling HistoryData., must be bigger than or equal to 1.');
        }

        $this->container['minted_gravity'] = $minted_gravity;

        return $this;
    }

    /**
     * Gets locked_tokens
     *
     * @return string
     */
    public function getLockedTokens()
    {
        return $this->container['locked_tokens'];
    }

    /**
     * Sets locked_tokens
     *
     * @param string $locked_tokens locked tokens
     *
     * @return $this
     */
    public function setLockedTokens($locked_tokens)
    {
        if ((mb_strlen($locked_tokens) > 32)) {
            throw new \InvalidArgumentException('invalid length for $locked_tokens when calling HistoryData., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($locked_tokens) < 1)) {
            throw new \InvalidArgumentException('invalid length for $locked_tokens when calling HistoryData., must be bigger than or equal to 1.');
        }

        $this->container['locked_tokens'] = $locked_tokens;

        return $this;
    }

    /**
     * Gets collected_tokens
     *
     * @return string
     */
    public function getCollectedTokens()
    {
        return $this->container['collected_tokens'];
    }

    /**
     * Sets collected_tokens
     *
     * @param string $collected_tokens tokens that has been collected
     *
     * @return $this
     */
    public function setCollectedTokens($collected_tokens)
    {
        if ((mb_strlen($collected_tokens) > 32)) {
            throw new \InvalidArgumentException('invalid length for $collected_tokens when calling HistoryData., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($collected_tokens) < 1)) {
            throw new \InvalidArgumentException('invalid length for $collected_tokens when calling HistoryData., must be bigger than or equal to 1.');
        }

        $this->container['collected_tokens'] = $collected_tokens;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


