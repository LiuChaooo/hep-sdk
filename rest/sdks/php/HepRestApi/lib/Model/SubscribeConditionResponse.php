<?php
/**
 * SubscribeConditionResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  HepRestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * HEP REST API
 *
 * The REST API for HEP protocol
 *
 * OpenAPI spec version: v1
 * Contact: xiawu@zeuux.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.7
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace HepRestApi\Model;

use \ArrayAccess;
use \HepRestApi\ObjectSerializer;

/**
 * SubscribeConditionResponse Class Doc Comment
 *
 * @category Class
 * @package  HepRestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SubscribeConditionResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SubscribeConditionResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'reward_pool_balance' => 'string',
        'subscription_rate' => 'string',
        'subscription_minimum' => 'string',
        'subscription_maximum' => 'string',
        'gravity_escrow_address' => 'string',
        'subscription_bonus_constant' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'reward_pool_balance' => null,
        'subscription_rate' => null,
        'subscription_minimum' => null,
        'subscription_maximum' => null,
        'gravity_escrow_address' => null,
        'subscription_bonus_constant' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'reward_pool_balance' => 'reward_pool_balance',
        'subscription_rate' => 'subscription_rate',
        'subscription_minimum' => 'subscription_minimum',
        'subscription_maximum' => 'subscription_maximum',
        'gravity_escrow_address' => 'gravity_escrow_address',
        'subscription_bonus_constant' => 'subscription_bonus_constant'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'reward_pool_balance' => 'setRewardPoolBalance',
        'subscription_rate' => 'setSubscriptionRate',
        'subscription_minimum' => 'setSubscriptionMinimum',
        'subscription_maximum' => 'setSubscriptionMaximum',
        'gravity_escrow_address' => 'setGravityEscrowAddress',
        'subscription_bonus_constant' => 'setSubscriptionBonusConstant'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'reward_pool_balance' => 'getRewardPoolBalance',
        'subscription_rate' => 'getSubscriptionRate',
        'subscription_minimum' => 'getSubscriptionMinimum',
        'subscription_maximum' => 'getSubscriptionMaximum',
        'gravity_escrow_address' => 'getGravityEscrowAddress',
        'subscription_bonus_constant' => 'getSubscriptionBonusConstant'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['reward_pool_balance'] = isset($data['reward_pool_balance']) ? $data['reward_pool_balance'] : null;
        $this->container['subscription_rate'] = isset($data['subscription_rate']) ? $data['subscription_rate'] : null;
        $this->container['subscription_minimum'] = isset($data['subscription_minimum']) ? $data['subscription_minimum'] : null;
        $this->container['subscription_maximum'] = isset($data['subscription_maximum']) ? $data['subscription_maximum'] : null;
        $this->container['gravity_escrow_address'] = isset($data['gravity_escrow_address']) ? $data['gravity_escrow_address'] : null;
        $this->container['subscription_bonus_constant'] = isset($data['subscription_bonus_constant']) ? $data['subscription_bonus_constant'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['reward_pool_balance'] === null) {
            $invalidProperties[] = "'reward_pool_balance' can't be null";
        }
        if ((mb_strlen($this->container['reward_pool_balance']) > 32)) {
            $invalidProperties[] = "invalid value for 'reward_pool_balance', the character length must be smaller than or equal to 32.";
        }

        if ((mb_strlen($this->container['reward_pool_balance']) < 1)) {
            $invalidProperties[] = "invalid value for 'reward_pool_balance', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['subscription_rate'] === null) {
            $invalidProperties[] = "'subscription_rate' can't be null";
        }
        if ((mb_strlen($this->container['subscription_rate']) > 4)) {
            $invalidProperties[] = "invalid value for 'subscription_rate', the character length must be smaller than or equal to 4.";
        }

        if ((mb_strlen($this->container['subscription_rate']) < 1)) {
            $invalidProperties[] = "invalid value for 'subscription_rate', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['subscription_minimum'] === null) {
            $invalidProperties[] = "'subscription_minimum' can't be null";
        }
        if ((mb_strlen($this->container['subscription_minimum']) > 32)) {
            $invalidProperties[] = "invalid value for 'subscription_minimum', the character length must be smaller than or equal to 32.";
        }

        if ((mb_strlen($this->container['subscription_minimum']) < 1)) {
            $invalidProperties[] = "invalid value for 'subscription_minimum', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['subscription_maximum'] === null) {
            $invalidProperties[] = "'subscription_maximum' can't be null";
        }
        if ((mb_strlen($this->container['subscription_maximum']) > 32)) {
            $invalidProperties[] = "invalid value for 'subscription_maximum', the character length must be smaller than or equal to 32.";
        }

        if ((mb_strlen($this->container['subscription_maximum']) < 1)) {
            $invalidProperties[] = "invalid value for 'subscription_maximum', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['gravity_escrow_address'] === null) {
            $invalidProperties[] = "'gravity_escrow_address' can't be null";
        }
        if ((mb_strlen($this->container['gravity_escrow_address']) > 64)) {
            $invalidProperties[] = "invalid value for 'gravity_escrow_address', the character length must be smaller than or equal to 64.";
        }

        if ((mb_strlen($this->container['gravity_escrow_address']) < 1)) {
            $invalidProperties[] = "invalid value for 'gravity_escrow_address', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['subscription_bonus_constant'] === null) {
            $invalidProperties[] = "'subscription_bonus_constant' can't be null";
        }
        if ((mb_strlen($this->container['subscription_bonus_constant']) > 16)) {
            $invalidProperties[] = "invalid value for 'subscription_bonus_constant', the character length must be smaller than or equal to 16.";
        }

        if ((mb_strlen($this->container['subscription_bonus_constant']) < 1)) {
            $invalidProperties[] = "invalid value for 'subscription_bonus_constant', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets reward_pool_balance
     *
     * @return string
     */
    public function getRewardPoolBalance()
    {
        return $this->container['reward_pool_balance'];
    }

    /**
     * Sets reward_pool_balance
     *
     * @param string $reward_pool_balance reward_pool_balance
     *
     * @return $this
     */
    public function setRewardPoolBalance($reward_pool_balance)
    {
        if ((mb_strlen($reward_pool_balance) > 32)) {
            throw new \InvalidArgumentException('invalid length for $reward_pool_balance when calling SubscribeConditionResponse., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($reward_pool_balance) < 1)) {
            throw new \InvalidArgumentException('invalid length for $reward_pool_balance when calling SubscribeConditionResponse., must be bigger than or equal to 1.');
        }

        $this->container['reward_pool_balance'] = $reward_pool_balance;

        return $this;
    }

    /**
     * Gets subscription_rate
     *
     * @return string
     */
    public function getSubscriptionRate()
    {
        return $this->container['subscription_rate'];
    }

    /**
     * Sets subscription_rate
     *
     * @param string $subscription_rate subscription_rate
     *
     * @return $this
     */
    public function setSubscriptionRate($subscription_rate)
    {
        if ((mb_strlen($subscription_rate) > 4)) {
            throw new \InvalidArgumentException('invalid length for $subscription_rate when calling SubscribeConditionResponse., must be smaller than or equal to 4.');
        }
        if ((mb_strlen($subscription_rate) < 1)) {
            throw new \InvalidArgumentException('invalid length for $subscription_rate when calling SubscribeConditionResponse., must be bigger than or equal to 1.');
        }

        $this->container['subscription_rate'] = $subscription_rate;

        return $this;
    }

    /**
     * Gets subscription_minimum
     *
     * @return string
     */
    public function getSubscriptionMinimum()
    {
        return $this->container['subscription_minimum'];
    }

    /**
     * Sets subscription_minimum
     *
     * @param string $subscription_minimum subscription_minimum
     *
     * @return $this
     */
    public function setSubscriptionMinimum($subscription_minimum)
    {
        if ((mb_strlen($subscription_minimum) > 32)) {
            throw new \InvalidArgumentException('invalid length for $subscription_minimum when calling SubscribeConditionResponse., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($subscription_minimum) < 1)) {
            throw new \InvalidArgumentException('invalid length for $subscription_minimum when calling SubscribeConditionResponse., must be bigger than or equal to 1.');
        }

        $this->container['subscription_minimum'] = $subscription_minimum;

        return $this;
    }

    /**
     * Gets subscription_maximum
     *
     * @return string
     */
    public function getSubscriptionMaximum()
    {
        return $this->container['subscription_maximum'];
    }

    /**
     * Sets subscription_maximum
     *
     * @param string $subscription_maximum subscription_maximum
     *
     * @return $this
     */
    public function setSubscriptionMaximum($subscription_maximum)
    {
        if ((mb_strlen($subscription_maximum) > 32)) {
            throw new \InvalidArgumentException('invalid length for $subscription_maximum when calling SubscribeConditionResponse., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($subscription_maximum) < 1)) {
            throw new \InvalidArgumentException('invalid length for $subscription_maximum when calling SubscribeConditionResponse., must be bigger than or equal to 1.');
        }

        $this->container['subscription_maximum'] = $subscription_maximum;

        return $this;
    }

    /**
     * Gets gravity_escrow_address
     *
     * @return string
     */
    public function getGravityEscrowAddress()
    {
        return $this->container['gravity_escrow_address'];
    }

    /**
     * Sets gravity_escrow_address
     *
     * @param string $gravity_escrow_address gravity_escrow_address
     *
     * @return $this
     */
    public function setGravityEscrowAddress($gravity_escrow_address)
    {
        if ((mb_strlen($gravity_escrow_address) > 64)) {
            throw new \InvalidArgumentException('invalid length for $gravity_escrow_address when calling SubscribeConditionResponse., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($gravity_escrow_address) < 1)) {
            throw new \InvalidArgumentException('invalid length for $gravity_escrow_address when calling SubscribeConditionResponse., must be bigger than or equal to 1.');
        }

        $this->container['gravity_escrow_address'] = $gravity_escrow_address;

        return $this;
    }

    /**
     * Gets subscription_bonus_constant
     *
     * @return string
     */
    public function getSubscriptionBonusConstant()
    {
        return $this->container['subscription_bonus_constant'];
    }

    /**
     * Sets subscription_bonus_constant
     *
     * @param string $subscription_bonus_constant subscription_bonus_constant
     *
     * @return $this
     */
    public function setSubscriptionBonusConstant($subscription_bonus_constant)
    {
        if ((mb_strlen($subscription_bonus_constant) > 16)) {
            throw new \InvalidArgumentException('invalid length for $subscription_bonus_constant when calling SubscribeConditionResponse., must be smaller than or equal to 16.');
        }
        if ((mb_strlen($subscription_bonus_constant) < 1)) {
            throw new \InvalidArgumentException('invalid length for $subscription_bonus_constant when calling SubscribeConditionResponse., must be bigger than or equal to 1.');
        }

        $this->container['subscription_bonus_constant'] = $subscription_bonus_constant;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


