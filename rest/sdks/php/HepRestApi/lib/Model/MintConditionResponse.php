<?php
/**
 * MintConditionResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  HepRestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * HEP REST API
 *
 * The REST API for HEP protocol
 *
 * OpenAPI spec version: v1
 * Contact: xiawu@zeuux.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.7
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace HepRestApi\Model;

use \ArrayAccess;
use \HepRestApi\ObjectSerializer;

/**
 * MintConditionResponse Class Doc Comment
 *
 * @category Class
 * @package  HepRestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MintConditionResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MintConditionResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'exchange_rate' => 'string',
        'locked_tokens_rate' => 'string',
        'locked_tokens_threshold' => 'string',
        'mint_formula_constant' => 'int',
        'locked_tokens_days_minimum' => 'string',
        'minting_gravity_minimum' => 'string',
        'minting_gravity_maximum' => 'string',
        'gravity_escrow_address' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'exchange_rate' => null,
        'locked_tokens_rate' => null,
        'locked_tokens_threshold' => null,
        'mint_formula_constant' => null,
        'locked_tokens_days_minimum' => null,
        'minting_gravity_minimum' => null,
        'minting_gravity_maximum' => null,
        'gravity_escrow_address' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'exchange_rate' => 'exchange_rate',
        'locked_tokens_rate' => 'locked_tokens_rate',
        'locked_tokens_threshold' => 'locked_tokens_threshold',
        'mint_formula_constant' => 'mint_formula_constant',
        'locked_tokens_days_minimum' => 'locked_tokens_days_minimum',
        'minting_gravity_minimum' => 'minting_gravity_minimum',
        'minting_gravity_maximum' => 'minting_gravity_maximum',
        'gravity_escrow_address' => 'gravity_escrow_address'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'exchange_rate' => 'setExchangeRate',
        'locked_tokens_rate' => 'setLockedTokensRate',
        'locked_tokens_threshold' => 'setLockedTokensThreshold',
        'mint_formula_constant' => 'setMintFormulaConstant',
        'locked_tokens_days_minimum' => 'setLockedTokensDaysMinimum',
        'minting_gravity_minimum' => 'setMintingGravityMinimum',
        'minting_gravity_maximum' => 'setMintingGravityMaximum',
        'gravity_escrow_address' => 'setGravityEscrowAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'exchange_rate' => 'getExchangeRate',
        'locked_tokens_rate' => 'getLockedTokensRate',
        'locked_tokens_threshold' => 'getLockedTokensThreshold',
        'mint_formula_constant' => 'getMintFormulaConstant',
        'locked_tokens_days_minimum' => 'getLockedTokensDaysMinimum',
        'minting_gravity_minimum' => 'getMintingGravityMinimum',
        'minting_gravity_maximum' => 'getMintingGravityMaximum',
        'gravity_escrow_address' => 'getGravityEscrowAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['exchange_rate'] = isset($data['exchange_rate']) ? $data['exchange_rate'] : null;
        $this->container['locked_tokens_rate'] = isset($data['locked_tokens_rate']) ? $data['locked_tokens_rate'] : null;
        $this->container['locked_tokens_threshold'] = isset($data['locked_tokens_threshold']) ? $data['locked_tokens_threshold'] : null;
        $this->container['mint_formula_constant'] = isset($data['mint_formula_constant']) ? $data['mint_formula_constant'] : null;
        $this->container['locked_tokens_days_minimum'] = isset($data['locked_tokens_days_minimum']) ? $data['locked_tokens_days_minimum'] : null;
        $this->container['minting_gravity_minimum'] = isset($data['minting_gravity_minimum']) ? $data['minting_gravity_minimum'] : null;
        $this->container['minting_gravity_maximum'] = isset($data['minting_gravity_maximum']) ? $data['minting_gravity_maximum'] : null;
        $this->container['gravity_escrow_address'] = isset($data['gravity_escrow_address']) ? $data['gravity_escrow_address'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['exchange_rate'] === null) {
            $invalidProperties[] = "'exchange_rate' can't be null";
        }
        if ((mb_strlen($this->container['exchange_rate']) > 4)) {
            $invalidProperties[] = "invalid value for 'exchange_rate', the character length must be smaller than or equal to 4.";
        }

        if ((mb_strlen($this->container['exchange_rate']) < 1)) {
            $invalidProperties[] = "invalid value for 'exchange_rate', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['locked_tokens_rate'] === null) {
            $invalidProperties[] = "'locked_tokens_rate' can't be null";
        }
        if ((mb_strlen($this->container['locked_tokens_rate']) > 4)) {
            $invalidProperties[] = "invalid value for 'locked_tokens_rate', the character length must be smaller than or equal to 4.";
        }

        if ((mb_strlen($this->container['locked_tokens_rate']) < 1)) {
            $invalidProperties[] = "invalid value for 'locked_tokens_rate', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['locked_tokens_threshold'] === null) {
            $invalidProperties[] = "'locked_tokens_threshold' can't be null";
        }
        if ((mb_strlen($this->container['locked_tokens_threshold']) > 16)) {
            $invalidProperties[] = "invalid value for 'locked_tokens_threshold', the character length must be smaller than or equal to 16.";
        }

        if ((mb_strlen($this->container['locked_tokens_threshold']) < 1)) {
            $invalidProperties[] = "invalid value for 'locked_tokens_threshold', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['mint_formula_constant'] === null) {
            $invalidProperties[] = "'mint_formula_constant' can't be null";
        }
        if ($this->container['locked_tokens_days_minimum'] === null) {
            $invalidProperties[] = "'locked_tokens_days_minimum' can't be null";
        }
        if ((mb_strlen($this->container['locked_tokens_days_minimum']) > 4)) {
            $invalidProperties[] = "invalid value for 'locked_tokens_days_minimum', the character length must be smaller than or equal to 4.";
        }

        if ((mb_strlen($this->container['locked_tokens_days_minimum']) < 1)) {
            $invalidProperties[] = "invalid value for 'locked_tokens_days_minimum', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['minting_gravity_minimum'] === null) {
            $invalidProperties[] = "'minting_gravity_minimum' can't be null";
        }
        if ((mb_strlen($this->container['minting_gravity_minimum']) > 32)) {
            $invalidProperties[] = "invalid value for 'minting_gravity_minimum', the character length must be smaller than or equal to 32.";
        }

        if ((mb_strlen($this->container['minting_gravity_minimum']) < 1)) {
            $invalidProperties[] = "invalid value for 'minting_gravity_minimum', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['minting_gravity_maximum'] === null) {
            $invalidProperties[] = "'minting_gravity_maximum' can't be null";
        }
        if ((mb_strlen($this->container['minting_gravity_maximum']) > 32)) {
            $invalidProperties[] = "invalid value for 'minting_gravity_maximum', the character length must be smaller than or equal to 32.";
        }

        if ((mb_strlen($this->container['minting_gravity_maximum']) < 1)) {
            $invalidProperties[] = "invalid value for 'minting_gravity_maximum', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['gravity_escrow_address'] === null) {
            $invalidProperties[] = "'gravity_escrow_address' can't be null";
        }
        if ((mb_strlen($this->container['gravity_escrow_address']) > 64)) {
            $invalidProperties[] = "invalid value for 'gravity_escrow_address', the character length must be smaller than or equal to 64.";
        }

        if ((mb_strlen($this->container['gravity_escrow_address']) < 1)) {
            $invalidProperties[] = "invalid value for 'gravity_escrow_address', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets exchange_rate
     *
     * @return string
     */
    public function getExchangeRate()
    {
        return $this->container['exchange_rate'];
    }

    /**
     * Sets exchange_rate
     *
     * @param string $exchange_rate Exchange rate GRV to NEW
     *
     * @return $this
     */
    public function setExchangeRate($exchange_rate)
    {
        if ((mb_strlen($exchange_rate) > 4)) {
            throw new \InvalidArgumentException('invalid length for $exchange_rate when calling MintConditionResponse., must be smaller than or equal to 4.');
        }
        if ((mb_strlen($exchange_rate) < 1)) {
            throw new \InvalidArgumentException('invalid length for $exchange_rate when calling MintConditionResponse., must be bigger than or equal to 1.');
        }

        $this->container['exchange_rate'] = $exchange_rate;

        return $this;
    }

    /**
     * Gets locked_tokens_rate
     *
     * @return string
     */
    public function getLockedTokensRate()
    {
        return $this->container['locked_tokens_rate'];
    }

    /**
     * Sets locked_tokens_rate
     *
     * @param string $locked_tokens_rate The rate of locking tokens when minting GRV
     *
     * @return $this
     */
    public function setLockedTokensRate($locked_tokens_rate)
    {
        if ((mb_strlen($locked_tokens_rate) > 4)) {
            throw new \InvalidArgumentException('invalid length for $locked_tokens_rate when calling MintConditionResponse., must be smaller than or equal to 4.');
        }
        if ((mb_strlen($locked_tokens_rate) < 1)) {
            throw new \InvalidArgumentException('invalid length for $locked_tokens_rate when calling MintConditionResponse., must be bigger than or equal to 1.');
        }

        $this->container['locked_tokens_rate'] = $locked_tokens_rate;

        return $this;
    }

    /**
     * Gets locked_tokens_threshold
     *
     * @return string
     */
    public function getLockedTokensThreshold()
    {
        return $this->container['locked_tokens_threshold'];
    }

    /**
     * Sets locked_tokens_threshold
     *
     * @param string $locked_tokens_threshold The threshold of locked tokens
     *
     * @return $this
     */
    public function setLockedTokensThreshold($locked_tokens_threshold)
    {
        if ((mb_strlen($locked_tokens_threshold) > 16)) {
            throw new \InvalidArgumentException('invalid length for $locked_tokens_threshold when calling MintConditionResponse., must be smaller than or equal to 16.');
        }
        if ((mb_strlen($locked_tokens_threshold) < 1)) {
            throw new \InvalidArgumentException('invalid length for $locked_tokens_threshold when calling MintConditionResponse., must be bigger than or equal to 1.');
        }

        $this->container['locked_tokens_threshold'] = $locked_tokens_threshold;

        return $this;
    }

    /**
     * Gets mint_formula_constant
     *
     * @return int
     */
    public function getMintFormulaConstant()
    {
        return $this->container['mint_formula_constant'];
    }

    /**
     * Sets mint_formula_constant
     *
     * @param int $mint_formula_constant Constant of the locked days formula
     *
     * @return $this
     */
    public function setMintFormulaConstant($mint_formula_constant)
    {
        $this->container['mint_formula_constant'] = $mint_formula_constant;

        return $this;
    }

    /**
     * Gets locked_tokens_days_minimum
     *
     * @return string
     */
    public function getLockedTokensDaysMinimum()
    {
        return $this->container['locked_tokens_days_minimum'];
    }

    /**
     * Sets locked_tokens_days_minimum
     *
     * @param string $locked_tokens_days_minimum The minimum locked days
     *
     * @return $this
     */
    public function setLockedTokensDaysMinimum($locked_tokens_days_minimum)
    {
        if ((mb_strlen($locked_tokens_days_minimum) > 4)) {
            throw new \InvalidArgumentException('invalid length for $locked_tokens_days_minimum when calling MintConditionResponse., must be smaller than or equal to 4.');
        }
        if ((mb_strlen($locked_tokens_days_minimum) < 1)) {
            throw new \InvalidArgumentException('invalid length for $locked_tokens_days_minimum when calling MintConditionResponse., must be bigger than or equal to 1.');
        }

        $this->container['locked_tokens_days_minimum'] = $locked_tokens_days_minimum;

        return $this;
    }

    /**
     * Gets minting_gravity_minimum
     *
     * @return string
     */
    public function getMintingGravityMinimum()
    {
        return $this->container['minting_gravity_minimum'];
    }

    /**
     * Sets minting_gravity_minimum
     *
     * @param string $minting_gravity_minimum The minimum GRV amount when minting
     *
     * @return $this
     */
    public function setMintingGravityMinimum($minting_gravity_minimum)
    {
        if ((mb_strlen($minting_gravity_minimum) > 32)) {
            throw new \InvalidArgumentException('invalid length for $minting_gravity_minimum when calling MintConditionResponse., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($minting_gravity_minimum) < 1)) {
            throw new \InvalidArgumentException('invalid length for $minting_gravity_minimum when calling MintConditionResponse., must be bigger than or equal to 1.');
        }

        $this->container['minting_gravity_minimum'] = $minting_gravity_minimum;

        return $this;
    }

    /**
     * Gets minting_gravity_maximum
     *
     * @return string
     */
    public function getMintingGravityMaximum()
    {
        return $this->container['minting_gravity_maximum'];
    }

    /**
     * Sets minting_gravity_maximum
     *
     * @param string $minting_gravity_maximum The maximum GRV amount when minting
     *
     * @return $this
     */
    public function setMintingGravityMaximum($minting_gravity_maximum)
    {
        if ((mb_strlen($minting_gravity_maximum) > 32)) {
            throw new \InvalidArgumentException('invalid length for $minting_gravity_maximum when calling MintConditionResponse., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($minting_gravity_maximum) < 1)) {
            throw new \InvalidArgumentException('invalid length for $minting_gravity_maximum when calling MintConditionResponse., must be bigger than or equal to 1.');
        }

        $this->container['minting_gravity_maximum'] = $minting_gravity_maximum;

        return $this;
    }

    /**
     * Gets gravity_escrow_address
     *
     * @return string
     */
    public function getGravityEscrowAddress()
    {
        return $this->container['gravity_escrow_address'];
    }

    /**
     * Sets gravity_escrow_address
     *
     * @param string $gravity_escrow_address GRV escrow address
     *
     * @return $this
     */
    public function setGravityEscrowAddress($gravity_escrow_address)
    {
        if ((mb_strlen($gravity_escrow_address) > 64)) {
            throw new \InvalidArgumentException('invalid length for $gravity_escrow_address when calling MintConditionResponse., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($gravity_escrow_address) < 1)) {
            throw new \InvalidArgumentException('invalid length for $gravity_escrow_address when calling MintConditionResponse., must be bigger than or equal to 1.');
        }

        $this->container['gravity_escrow_address'] = $gravity_escrow_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


