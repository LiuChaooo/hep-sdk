<?php
/**
 * AccountResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  HepRestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * HEP REST API
 *
 * The REST API for HEP protocol
 *
 * OpenAPI spec version: v1
 * Contact: xiawu@zeuux.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.7
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace HepRestApi\Model;

use \ArrayAccess;
use \HepRestApi\ObjectSerializer;

/**
 * AccountResponse Class Doc Comment
 *
 * @category Class
 * @package  HepRestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccountResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'is_in_whitelist' => 'bool',
        'mint_status' => 'int',
        'collect_status' => 'int',
        'total_gravity' => 'string',
        'in_minting_gravity' => 'string',
        'minted_gravity' => 'string',
        'exchanged_tokens' => 'string',
        'exchange_rate' => 'string',
        'gravity_escrow_address' => 'string',
        'can_collect_tokens' => 'string',
        'locked_tokens' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'is_in_whitelist' => null,
        'mint_status' => null,
        'collect_status' => null,
        'total_gravity' => null,
        'in_minting_gravity' => null,
        'minted_gravity' => null,
        'exchanged_tokens' => null,
        'exchange_rate' => null,
        'gravity_escrow_address' => null,
        'can_collect_tokens' => null,
        'locked_tokens' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_in_whitelist' => 'is_in_whitelist',
        'mint_status' => 'mint_status',
        'collect_status' => 'collect_status',
        'total_gravity' => 'total_gravity',
        'in_minting_gravity' => 'in_minting_gravity',
        'minted_gravity' => 'minted_gravity',
        'exchanged_tokens' => 'exchanged_tokens',
        'exchange_rate' => 'exchange_rate',
        'gravity_escrow_address' => 'gravity_escrow_address',
        'can_collect_tokens' => 'can_collect_tokens',
        'locked_tokens' => 'locked_tokens'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_in_whitelist' => 'setIsInWhitelist',
        'mint_status' => 'setMintStatus',
        'collect_status' => 'setCollectStatus',
        'total_gravity' => 'setTotalGravity',
        'in_minting_gravity' => 'setInMintingGravity',
        'minted_gravity' => 'setMintedGravity',
        'exchanged_tokens' => 'setExchangedTokens',
        'exchange_rate' => 'setExchangeRate',
        'gravity_escrow_address' => 'setGravityEscrowAddress',
        'can_collect_tokens' => 'setCanCollectTokens',
        'locked_tokens' => 'setLockedTokens'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_in_whitelist' => 'getIsInWhitelist',
        'mint_status' => 'getMintStatus',
        'collect_status' => 'getCollectStatus',
        'total_gravity' => 'getTotalGravity',
        'in_minting_gravity' => 'getInMintingGravity',
        'minted_gravity' => 'getMintedGravity',
        'exchanged_tokens' => 'getExchangedTokens',
        'exchange_rate' => 'getExchangeRate',
        'gravity_escrow_address' => 'getGravityEscrowAddress',
        'can_collect_tokens' => 'getCanCollectTokens',
        'locked_tokens' => 'getLockedTokens'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_in_whitelist'] = isset($data['is_in_whitelist']) ? $data['is_in_whitelist'] : null;
        $this->container['mint_status'] = isset($data['mint_status']) ? $data['mint_status'] : null;
        $this->container['collect_status'] = isset($data['collect_status']) ? $data['collect_status'] : null;
        $this->container['total_gravity'] = isset($data['total_gravity']) ? $data['total_gravity'] : null;
        $this->container['in_minting_gravity'] = isset($data['in_minting_gravity']) ? $data['in_minting_gravity'] : null;
        $this->container['minted_gravity'] = isset($data['minted_gravity']) ? $data['minted_gravity'] : null;
        $this->container['exchanged_tokens'] = isset($data['exchanged_tokens']) ? $data['exchanged_tokens'] : null;
        $this->container['exchange_rate'] = isset($data['exchange_rate']) ? $data['exchange_rate'] : null;
        $this->container['gravity_escrow_address'] = isset($data['gravity_escrow_address']) ? $data['gravity_escrow_address'] : null;
        $this->container['can_collect_tokens'] = isset($data['can_collect_tokens']) ? $data['can_collect_tokens'] : null;
        $this->container['locked_tokens'] = isset($data['locked_tokens']) ? $data['locked_tokens'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['is_in_whitelist'] === null) {
            $invalidProperties[] = "'is_in_whitelist' can't be null";
        }
        if ($this->container['mint_status'] === null) {
            $invalidProperties[] = "'mint_status' can't be null";
        }
        if ($this->container['collect_status'] === null) {
            $invalidProperties[] = "'collect_status' can't be null";
        }
        if ($this->container['total_gravity'] === null) {
            $invalidProperties[] = "'total_gravity' can't be null";
        }
        if ((mb_strlen($this->container['total_gravity']) > 32)) {
            $invalidProperties[] = "invalid value for 'total_gravity', the character length must be smaller than or equal to 32.";
        }

        if ((mb_strlen($this->container['total_gravity']) < 1)) {
            $invalidProperties[] = "invalid value for 'total_gravity', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['in_minting_gravity'] === null) {
            $invalidProperties[] = "'in_minting_gravity' can't be null";
        }
        if ((mb_strlen($this->container['in_minting_gravity']) > 32)) {
            $invalidProperties[] = "invalid value for 'in_minting_gravity', the character length must be smaller than or equal to 32.";
        }

        if ((mb_strlen($this->container['in_minting_gravity']) < 1)) {
            $invalidProperties[] = "invalid value for 'in_minting_gravity', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['minted_gravity'] === null) {
            $invalidProperties[] = "'minted_gravity' can't be null";
        }
        if ((mb_strlen($this->container['minted_gravity']) > 32)) {
            $invalidProperties[] = "invalid value for 'minted_gravity', the character length must be smaller than or equal to 32.";
        }

        if ((mb_strlen($this->container['minted_gravity']) < 1)) {
            $invalidProperties[] = "invalid value for 'minted_gravity', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['exchanged_tokens'] === null) {
            $invalidProperties[] = "'exchanged_tokens' can't be null";
        }
        if ((mb_strlen($this->container['exchanged_tokens']) > 32)) {
            $invalidProperties[] = "invalid value for 'exchanged_tokens', the character length must be smaller than or equal to 32.";
        }

        if ((mb_strlen($this->container['exchanged_tokens']) < 1)) {
            $invalidProperties[] = "invalid value for 'exchanged_tokens', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['exchange_rate'] === null) {
            $invalidProperties[] = "'exchange_rate' can't be null";
        }
        if ((mb_strlen($this->container['exchange_rate']) > 4)) {
            $invalidProperties[] = "invalid value for 'exchange_rate', the character length must be smaller than or equal to 4.";
        }

        if ((mb_strlen($this->container['exchange_rate']) < 1)) {
            $invalidProperties[] = "invalid value for 'exchange_rate', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['gravity_escrow_address'] === null) {
            $invalidProperties[] = "'gravity_escrow_address' can't be null";
        }
        if ((mb_strlen($this->container['gravity_escrow_address']) > 64)) {
            $invalidProperties[] = "invalid value for 'gravity_escrow_address', the character length must be smaller than or equal to 64.";
        }

        if ((mb_strlen($this->container['gravity_escrow_address']) < 1)) {
            $invalidProperties[] = "invalid value for 'gravity_escrow_address', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['can_collect_tokens'] === null) {
            $invalidProperties[] = "'can_collect_tokens' can't be null";
        }
        if ((mb_strlen($this->container['can_collect_tokens']) > 32)) {
            $invalidProperties[] = "invalid value for 'can_collect_tokens', the character length must be smaller than or equal to 32.";
        }

        if ((mb_strlen($this->container['can_collect_tokens']) < 1)) {
            $invalidProperties[] = "invalid value for 'can_collect_tokens', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['locked_tokens'] === null) {
            $invalidProperties[] = "'locked_tokens' can't be null";
        }
        if ((mb_strlen($this->container['locked_tokens']) > 32)) {
            $invalidProperties[] = "invalid value for 'locked_tokens', the character length must be smaller than or equal to 32.";
        }

        if ((mb_strlen($this->container['locked_tokens']) < 1)) {
            $invalidProperties[] = "invalid value for 'locked_tokens', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_in_whitelist
     *
     * @return bool
     */
    public function getIsInWhitelist()
    {
        return $this->container['is_in_whitelist'];
    }

    /**
     * Sets is_in_whitelist
     *
     * @param bool $is_in_whitelist Whether the NewID in whitelist
     *
     * @return $this
     */
    public function setIsInWhitelist($is_in_whitelist)
    {
        $this->container['is_in_whitelist'] = $is_in_whitelist;

        return $this;
    }

    /**
     * Gets mint_status
     *
     * @return int
     */
    public function getMintStatus()
    {
        return $this->container['mint_status'];
    }

    /**
     * Sets mint_status
     *
     * @param int $mint_status The mint status
     *
     * @return $this
     */
    public function setMintStatus($mint_status)
    {
        $this->container['mint_status'] = $mint_status;

        return $this;
    }

    /**
     * Gets collect_status
     *
     * @return int
     */
    public function getCollectStatus()
    {
        return $this->container['collect_status'];
    }

    /**
     * Sets collect_status
     *
     * @param int $collect_status The collect status
     *
     * @return $this
     */
    public function setCollectStatus($collect_status)
    {
        $this->container['collect_status'] = $collect_status;

        return $this;
    }

    /**
     * Gets total_gravity
     *
     * @return string
     */
    public function getTotalGravity()
    {
        return $this->container['total_gravity'];
    }

    /**
     * Sets total_gravity
     *
     * @param string $total_gravity The total Gravity
     *
     * @return $this
     */
    public function setTotalGravity($total_gravity)
    {
        if ((mb_strlen($total_gravity) > 32)) {
            throw new \InvalidArgumentException('invalid length for $total_gravity when calling AccountResponse., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($total_gravity) < 1)) {
            throw new \InvalidArgumentException('invalid length for $total_gravity when calling AccountResponse., must be bigger than or equal to 1.');
        }

        $this->container['total_gravity'] = $total_gravity;

        return $this;
    }

    /**
     * Gets in_minting_gravity
     *
     * @return string
     */
    public function getInMintingGravity()
    {
        return $this->container['in_minting_gravity'];
    }

    /**
     * Sets in_minting_gravity
     *
     * @param string $in_minting_gravity In minting Gravity
     *
     * @return $this
     */
    public function setInMintingGravity($in_minting_gravity)
    {
        if ((mb_strlen($in_minting_gravity) > 32)) {
            throw new \InvalidArgumentException('invalid length for $in_minting_gravity when calling AccountResponse., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($in_minting_gravity) < 1)) {
            throw new \InvalidArgumentException('invalid length for $in_minting_gravity when calling AccountResponse., must be bigger than or equal to 1.');
        }

        $this->container['in_minting_gravity'] = $in_minting_gravity;

        return $this;
    }

    /**
     * Gets minted_gravity
     *
     * @return string
     */
    public function getMintedGravity()
    {
        return $this->container['minted_gravity'];
    }

    /**
     * Sets minted_gravity
     *
     * @param string $minted_gravity History accumulative minted Gravity
     *
     * @return $this
     */
    public function setMintedGravity($minted_gravity)
    {
        if ((mb_strlen($minted_gravity) > 32)) {
            throw new \InvalidArgumentException('invalid length for $minted_gravity when calling AccountResponse., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($minted_gravity) < 1)) {
            throw new \InvalidArgumentException('invalid length for $minted_gravity when calling AccountResponse., must be bigger than or equal to 1.');
        }

        $this->container['minted_gravity'] = $minted_gravity;

        return $this;
    }

    /**
     * Gets exchanged_tokens
     *
     * @return string
     */
    public function getExchangedTokens()
    {
        return $this->container['exchanged_tokens'];
    }

    /**
     * Sets exchanged_tokens
     *
     * @param string $exchanged_tokens History accumulative exchanged tokens
     *
     * @return $this
     */
    public function setExchangedTokens($exchanged_tokens)
    {
        if ((mb_strlen($exchanged_tokens) > 32)) {
            throw new \InvalidArgumentException('invalid length for $exchanged_tokens when calling AccountResponse., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($exchanged_tokens) < 1)) {
            throw new \InvalidArgumentException('invalid length for $exchanged_tokens when calling AccountResponse., must be bigger than or equal to 1.');
        }

        $this->container['exchanged_tokens'] = $exchanged_tokens;

        return $this;
    }

    /**
     * Gets exchange_rate
     *
     * @return string
     */
    public function getExchangeRate()
    {
        return $this->container['exchange_rate'];
    }

    /**
     * Sets exchange_rate
     *
     * @param string $exchange_rate Exchange rate GRV to NEW
     *
     * @return $this
     */
    public function setExchangeRate($exchange_rate)
    {
        if ((mb_strlen($exchange_rate) > 4)) {
            throw new \InvalidArgumentException('invalid length for $exchange_rate when calling AccountResponse., must be smaller than or equal to 4.');
        }
        if ((mb_strlen($exchange_rate) < 1)) {
            throw new \InvalidArgumentException('invalid length for $exchange_rate when calling AccountResponse., must be bigger than or equal to 1.');
        }

        $this->container['exchange_rate'] = $exchange_rate;

        return $this;
    }

    /**
     * Gets gravity_escrow_address
     *
     * @return string
     */
    public function getGravityEscrowAddress()
    {
        return $this->container['gravity_escrow_address'];
    }

    /**
     * Sets gravity_escrow_address
     *
     * @param string $gravity_escrow_address Gravity escrow address
     *
     * @return $this
     */
    public function setGravityEscrowAddress($gravity_escrow_address)
    {
        if ((mb_strlen($gravity_escrow_address) > 64)) {
            throw new \InvalidArgumentException('invalid length for $gravity_escrow_address when calling AccountResponse., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($gravity_escrow_address) < 1)) {
            throw new \InvalidArgumentException('invalid length for $gravity_escrow_address when calling AccountResponse., must be bigger than or equal to 1.');
        }

        $this->container['gravity_escrow_address'] = $gravity_escrow_address;

        return $this;
    }

    /**
     * Gets can_collect_tokens
     *
     * @return string
     */
    public function getCanCollectTokens()
    {
        return $this->container['can_collect_tokens'];
    }

    /**
     * Sets can_collect_tokens
     *
     * @param string $can_collect_tokens Can collect NEW amount now
     *
     * @return $this
     */
    public function setCanCollectTokens($can_collect_tokens)
    {
        if ((mb_strlen($can_collect_tokens) > 32)) {
            throw new \InvalidArgumentException('invalid length for $can_collect_tokens when calling AccountResponse., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($can_collect_tokens) < 1)) {
            throw new \InvalidArgumentException('invalid length for $can_collect_tokens when calling AccountResponse., must be bigger than or equal to 1.');
        }

        $this->container['can_collect_tokens'] = $can_collect_tokens;

        return $this;
    }

    /**
     * Gets locked_tokens
     *
     * @return string
     */
    public function getLockedTokens()
    {
        return $this->container['locked_tokens'];
    }

    /**
     * Sets locked_tokens
     *
     * @param string $locked_tokens In locking NEW amount now
     *
     * @return $this
     */
    public function setLockedTokens($locked_tokens)
    {
        if ((mb_strlen($locked_tokens) > 32)) {
            throw new \InvalidArgumentException('invalid length for $locked_tokens when calling AccountResponse., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($locked_tokens) < 1)) {
            throw new \InvalidArgumentException('invalid length for $locked_tokens when calling AccountResponse., must be bigger than or equal to 1.');
        }

        $this->container['locked_tokens'] = $locked_tokens;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


