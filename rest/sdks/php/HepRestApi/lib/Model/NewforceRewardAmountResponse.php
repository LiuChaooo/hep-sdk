<?php
/**
 * NewforceRewardAmountResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  HepRestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * HEP REST API
 *
 * The REST API for HEP protocol
 *
 * OpenAPI spec version: v1
 * Contact: xiawu@zeuux.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.7
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace HepRestApi\Model;

use \ArrayAccess;
use \HepRestApi\ObjectSerializer;

/**
 * NewforceRewardAmountResponse Class Doc Comment
 *
 * @category Class
 * @package  HepRestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NewforceRewardAmountResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NewforceRewardAmountResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'total_reward' => 'string',
        'direct_invite_reward' => 'string',
        'indirect_invite_reward' => 'string',
        'direct_buy_reward' => 'string',
        'indirect_buy_reward' => 'string',
        'sale_reward' => 'string',
        'locked_for_candidate_reward' => 'string',
        'locked_for_voter_reward' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'total_reward' => null,
        'direct_invite_reward' => null,
        'indirect_invite_reward' => null,
        'direct_buy_reward' => null,
        'indirect_buy_reward' => null,
        'sale_reward' => null,
        'locked_for_candidate_reward' => null,
        'locked_for_voter_reward' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'total_reward' => 'total_reward',
        'direct_invite_reward' => 'direct_invite_reward',
        'indirect_invite_reward' => 'indirect_invite_reward',
        'direct_buy_reward' => 'direct_buy_reward',
        'indirect_buy_reward' => 'indirect_buy_reward',
        'sale_reward' => 'sale_reward',
        'locked_for_candidate_reward' => 'locked_for_candidate_reward',
        'locked_for_voter_reward' => 'locked_for_voter_reward'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'total_reward' => 'setTotalReward',
        'direct_invite_reward' => 'setDirectInviteReward',
        'indirect_invite_reward' => 'setIndirectInviteReward',
        'direct_buy_reward' => 'setDirectBuyReward',
        'indirect_buy_reward' => 'setIndirectBuyReward',
        'sale_reward' => 'setSaleReward',
        'locked_for_candidate_reward' => 'setLockedForCandidateReward',
        'locked_for_voter_reward' => 'setLockedForVoterReward'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'total_reward' => 'getTotalReward',
        'direct_invite_reward' => 'getDirectInviteReward',
        'indirect_invite_reward' => 'getIndirectInviteReward',
        'direct_buy_reward' => 'getDirectBuyReward',
        'indirect_buy_reward' => 'getIndirectBuyReward',
        'sale_reward' => 'getSaleReward',
        'locked_for_candidate_reward' => 'getLockedForCandidateReward',
        'locked_for_voter_reward' => 'getLockedForVoterReward'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['total_reward'] = isset($data['total_reward']) ? $data['total_reward'] : null;
        $this->container['direct_invite_reward'] = isset($data['direct_invite_reward']) ? $data['direct_invite_reward'] : null;
        $this->container['indirect_invite_reward'] = isset($data['indirect_invite_reward']) ? $data['indirect_invite_reward'] : null;
        $this->container['direct_buy_reward'] = isset($data['direct_buy_reward']) ? $data['direct_buy_reward'] : null;
        $this->container['indirect_buy_reward'] = isset($data['indirect_buy_reward']) ? $data['indirect_buy_reward'] : null;
        $this->container['sale_reward'] = isset($data['sale_reward']) ? $data['sale_reward'] : null;
        $this->container['locked_for_candidate_reward'] = isset($data['locked_for_candidate_reward']) ? $data['locked_for_candidate_reward'] : null;
        $this->container['locked_for_voter_reward'] = isset($data['locked_for_voter_reward']) ? $data['locked_for_voter_reward'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['total_reward'] === null) {
            $invalidProperties[] = "'total_reward' can't be null";
        }
        if ((mb_strlen($this->container['total_reward']) > 64)) {
            $invalidProperties[] = "invalid value for 'total_reward', the character length must be smaller than or equal to 64.";
        }

        if ((mb_strlen($this->container['total_reward']) < 1)) {
            $invalidProperties[] = "invalid value for 'total_reward', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['direct_invite_reward'] === null) {
            $invalidProperties[] = "'direct_invite_reward' can't be null";
        }
        if ((mb_strlen($this->container['direct_invite_reward']) > 64)) {
            $invalidProperties[] = "invalid value for 'direct_invite_reward', the character length must be smaller than or equal to 64.";
        }

        if ((mb_strlen($this->container['direct_invite_reward']) < 1)) {
            $invalidProperties[] = "invalid value for 'direct_invite_reward', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['indirect_invite_reward'] === null) {
            $invalidProperties[] = "'indirect_invite_reward' can't be null";
        }
        if ((mb_strlen($this->container['indirect_invite_reward']) > 64)) {
            $invalidProperties[] = "invalid value for 'indirect_invite_reward', the character length must be smaller than or equal to 64.";
        }

        if ((mb_strlen($this->container['indirect_invite_reward']) < 1)) {
            $invalidProperties[] = "invalid value for 'indirect_invite_reward', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['direct_buy_reward'] === null) {
            $invalidProperties[] = "'direct_buy_reward' can't be null";
        }
        if ((mb_strlen($this->container['direct_buy_reward']) > 64)) {
            $invalidProperties[] = "invalid value for 'direct_buy_reward', the character length must be smaller than or equal to 64.";
        }

        if ((mb_strlen($this->container['direct_buy_reward']) < 1)) {
            $invalidProperties[] = "invalid value for 'direct_buy_reward', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['indirect_buy_reward'] === null) {
            $invalidProperties[] = "'indirect_buy_reward' can't be null";
        }
        if ((mb_strlen($this->container['indirect_buy_reward']) > 64)) {
            $invalidProperties[] = "invalid value for 'indirect_buy_reward', the character length must be smaller than or equal to 64.";
        }

        if ((mb_strlen($this->container['indirect_buy_reward']) < 1)) {
            $invalidProperties[] = "invalid value for 'indirect_buy_reward', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['sale_reward'] === null) {
            $invalidProperties[] = "'sale_reward' can't be null";
        }
        if ((mb_strlen($this->container['sale_reward']) > 64)) {
            $invalidProperties[] = "invalid value for 'sale_reward', the character length must be smaller than or equal to 64.";
        }

        if ((mb_strlen($this->container['sale_reward']) < 1)) {
            $invalidProperties[] = "invalid value for 'sale_reward', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['locked_for_candidate_reward'] === null) {
            $invalidProperties[] = "'locked_for_candidate_reward' can't be null";
        }
        if ((mb_strlen($this->container['locked_for_candidate_reward']) > 64)) {
            $invalidProperties[] = "invalid value for 'locked_for_candidate_reward', the character length must be smaller than or equal to 64.";
        }

        if ((mb_strlen($this->container['locked_for_candidate_reward']) < 1)) {
            $invalidProperties[] = "invalid value for 'locked_for_candidate_reward', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['locked_for_voter_reward'] === null) {
            $invalidProperties[] = "'locked_for_voter_reward' can't be null";
        }
        if ((mb_strlen($this->container['locked_for_voter_reward']) > 64)) {
            $invalidProperties[] = "invalid value for 'locked_for_voter_reward', the character length must be smaller than or equal to 64.";
        }

        if ((mb_strlen($this->container['locked_for_voter_reward']) < 1)) {
            $invalidProperties[] = "invalid value for 'locked_for_voter_reward', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets total_reward
     *
     * @return string
     */
    public function getTotalReward()
    {
        return $this->container['total_reward'];
    }

    /**
     * Sets total_reward
     *
     * @param string $total_reward The total reward tokens
     *
     * @return $this
     */
    public function setTotalReward($total_reward)
    {
        if ((mb_strlen($total_reward) > 64)) {
            throw new \InvalidArgumentException('invalid length for $total_reward when calling NewforceRewardAmountResponse., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($total_reward) < 1)) {
            throw new \InvalidArgumentException('invalid length for $total_reward when calling NewforceRewardAmountResponse., must be bigger than or equal to 1.');
        }

        $this->container['total_reward'] = $total_reward;

        return $this;
    }

    /**
     * Gets direct_invite_reward
     *
     * @return string
     */
    public function getDirectInviteReward()
    {
        return $this->container['direct_invite_reward'];
    }

    /**
     * Sets direct_invite_reward
     *
     * @param string $direct_invite_reward The reward tokens of direct invitation
     *
     * @return $this
     */
    public function setDirectInviteReward($direct_invite_reward)
    {
        if ((mb_strlen($direct_invite_reward) > 64)) {
            throw new \InvalidArgumentException('invalid length for $direct_invite_reward when calling NewforceRewardAmountResponse., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($direct_invite_reward) < 1)) {
            throw new \InvalidArgumentException('invalid length for $direct_invite_reward when calling NewforceRewardAmountResponse., must be bigger than or equal to 1.');
        }

        $this->container['direct_invite_reward'] = $direct_invite_reward;

        return $this;
    }

    /**
     * Gets indirect_invite_reward
     *
     * @return string
     */
    public function getIndirectInviteReward()
    {
        return $this->container['indirect_invite_reward'];
    }

    /**
     * Sets indirect_invite_reward
     *
     * @param string $indirect_invite_reward The reward tokens of indirect invitation
     *
     * @return $this
     */
    public function setIndirectInviteReward($indirect_invite_reward)
    {
        if ((mb_strlen($indirect_invite_reward) > 64)) {
            throw new \InvalidArgumentException('invalid length for $indirect_invite_reward when calling NewforceRewardAmountResponse., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($indirect_invite_reward) < 1)) {
            throw new \InvalidArgumentException('invalid length for $indirect_invite_reward when calling NewforceRewardAmountResponse., must be bigger than or equal to 1.');
        }

        $this->container['indirect_invite_reward'] = $indirect_invite_reward;

        return $this;
    }

    /**
     * Gets direct_buy_reward
     *
     * @return string
     */
    public function getDirectBuyReward()
    {
        return $this->container['direct_buy_reward'];
    }

    /**
     * Sets direct_buy_reward
     *
     * @param string $direct_buy_reward The reward tokens of direct purchase
     *
     * @return $this
     */
    public function setDirectBuyReward($direct_buy_reward)
    {
        if ((mb_strlen($direct_buy_reward) > 64)) {
            throw new \InvalidArgumentException('invalid length for $direct_buy_reward when calling NewforceRewardAmountResponse., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($direct_buy_reward) < 1)) {
            throw new \InvalidArgumentException('invalid length for $direct_buy_reward when calling NewforceRewardAmountResponse., must be bigger than or equal to 1.');
        }

        $this->container['direct_buy_reward'] = $direct_buy_reward;

        return $this;
    }

    /**
     * Gets indirect_buy_reward
     *
     * @return string
     */
    public function getIndirectBuyReward()
    {
        return $this->container['indirect_buy_reward'];
    }

    /**
     * Sets indirect_buy_reward
     *
     * @param string $indirect_buy_reward The reward tokens of indirect purchase
     *
     * @return $this
     */
    public function setIndirectBuyReward($indirect_buy_reward)
    {
        if ((mb_strlen($indirect_buy_reward) > 64)) {
            throw new \InvalidArgumentException('invalid length for $indirect_buy_reward when calling NewforceRewardAmountResponse., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($indirect_buy_reward) < 1)) {
            throw new \InvalidArgumentException('invalid length for $indirect_buy_reward when calling NewforceRewardAmountResponse., must be bigger than or equal to 1.');
        }

        $this->container['indirect_buy_reward'] = $indirect_buy_reward;

        return $this;
    }

    /**
     * Gets sale_reward
     *
     * @return string
     */
    public function getSaleReward()
    {
        return $this->container['sale_reward'];
    }

    /**
     * Sets sale_reward
     *
     * @param string $sale_reward The reward tokens of sale
     *
     * @return $this
     */
    public function setSaleReward($sale_reward)
    {
        if ((mb_strlen($sale_reward) > 64)) {
            throw new \InvalidArgumentException('invalid length for $sale_reward when calling NewforceRewardAmountResponse., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($sale_reward) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sale_reward when calling NewforceRewardAmountResponse., must be bigger than or equal to 1.');
        }

        $this->container['sale_reward'] = $sale_reward;

        return $this;
    }

    /**
     * Gets locked_for_candidate_reward
     *
     * @return string
     */
    public function getLockedForCandidateReward()
    {
        return $this->container['locked_for_candidate_reward'];
    }

    /**
     * Sets locked_for_candidate_reward
     *
     * @param string $locked_for_candidate_reward The reward tokens of locked for community node
     *
     * @return $this
     */
    public function setLockedForCandidateReward($locked_for_candidate_reward)
    {
        if ((mb_strlen($locked_for_candidate_reward) > 64)) {
            throw new \InvalidArgumentException('invalid length for $locked_for_candidate_reward when calling NewforceRewardAmountResponse., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($locked_for_candidate_reward) < 1)) {
            throw new \InvalidArgumentException('invalid length for $locked_for_candidate_reward when calling NewforceRewardAmountResponse., must be bigger than or equal to 1.');
        }

        $this->container['locked_for_candidate_reward'] = $locked_for_candidate_reward;

        return $this;
    }

    /**
     * Gets locked_for_voter_reward
     *
     * @return string
     */
    public function getLockedForVoterReward()
    {
        return $this->container['locked_for_voter_reward'];
    }

    /**
     * Sets locked_for_voter_reward
     *
     * @param string $locked_for_voter_reward The reward tokens of locked for vote
     *
     * @return $this
     */
    public function setLockedForVoterReward($locked_for_voter_reward)
    {
        if ((mb_strlen($locked_for_voter_reward) > 64)) {
            throw new \InvalidArgumentException('invalid length for $locked_for_voter_reward when calling NewforceRewardAmountResponse., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($locked_for_voter_reward) < 1)) {
            throw new \InvalidArgumentException('invalid length for $locked_for_voter_reward when calling NewforceRewardAmountResponse., must be bigger than or equal to 1.');
        }

        $this->container['locked_for_voter_reward'] = $locked_for_voter_reward;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


