/*
 * HEP REST API
 * The REST API for HEP protocol
 *
 * OpenAPI spec version: v1
 * Contact: xiawu@zeuux.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.newtonproject.hep.rest.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * NewforceDailyStatsResponse
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-07-05T19:42:46.441+08:00")
public class NewforceDailyStatsResponse {
  @SerializedName("nf_new")
  private String nfNew = null;

  @SerializedName("nf_cny")
  private String nfCny = null;

  @SerializedName("nf_usd")
  private String nfUsd = null;

  @SerializedName("gnf")
  private String gnf = null;

  public NewforceDailyStatsResponse nfNew(String nfNew) {
    this.nfNew = nfNew;
    return this;
  }

   /**
   * The conversion rate between NewForce(NF) and NEW
   * @return nfNew
  **/
  @ApiModelProperty(required = true, value = "The conversion rate between NewForce(NF) and NEW")
  public String getNfNew() {
    return nfNew;
  }

  public void setNfNew(String nfNew) {
    this.nfNew = nfNew;
  }

  public NewforceDailyStatsResponse nfCny(String nfCny) {
    this.nfCny = nfCny;
    return this;
  }

   /**
   * The conversion rate between NewForce(NF) and CNY
   * @return nfCny
  **/
  @ApiModelProperty(required = true, value = "The conversion rate between NewForce(NF) and CNY")
  public String getNfCny() {
    return nfCny;
  }

  public void setNfCny(String nfCny) {
    this.nfCny = nfCny;
  }

  public NewforceDailyStatsResponse nfUsd(String nfUsd) {
    this.nfUsd = nfUsd;
    return this;
  }

   /**
   * The conversion rate between NewForce(NF) and USD
   * @return nfUsd
  **/
  @ApiModelProperty(required = true, value = "The conversion rate between NewForce(NF) and USD")
  public String getNfUsd() {
    return nfUsd;
  }

  public void setNfUsd(String nfUsd) {
    this.nfUsd = nfUsd;
  }

  public NewforceDailyStatsResponse gnf(String gnf) {
    this.gnf = gnf;
    return this;
  }

   /**
   * The global NewForce
   * @return gnf
  **/
  @ApiModelProperty(required = true, value = "The global NewForce")
  public String getGnf() {
    return gnf;
  }

  public void setGnf(String gnf) {
    this.gnf = gnf;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewforceDailyStatsResponse newforceDailyStatsResponse = (NewforceDailyStatsResponse) o;
    return Objects.equals(this.nfNew, newforceDailyStatsResponse.nfNew) &&
        Objects.equals(this.nfCny, newforceDailyStatsResponse.nfCny) &&
        Objects.equals(this.nfUsd, newforceDailyStatsResponse.nfUsd) &&
        Objects.equals(this.gnf, newforceDailyStatsResponse.gnf);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nfNew, nfCny, nfUsd, gnf);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewforceDailyStatsResponse {\n");
    
    sb.append("    nfNew: ").append(toIndentedString(nfNew)).append("\n");
    sb.append("    nfCny: ").append(toIndentedString(nfCny)).append("\n");
    sb.append("    nfUsd: ").append(toIndentedString(nfUsd)).append("\n");
    sb.append("    gnf: ").append(toIndentedString(gnf)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

