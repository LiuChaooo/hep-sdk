package org.newtonproject.hep.rest.api;

import org.newtonproject.hep.rest.CollectionFormats.*;

import io.reactivex.Observable;
import io.reactivex.Completable;
import retrofit2.http.*;

import okhttp3.RequestBody;
import okhttp3.ResponseBody;
import okhttp3.MultipartBody;

import org.newtonproject.hep.rest.models.AuthCacheRequest;
import org.newtonproject.hep.rest.models.AuthCacheResponse;
import org.newtonproject.hep.rest.models.CancelProofRequest;
import org.newtonproject.hep.rest.models.CancelProofResponse;
import org.newtonproject.hep.rest.models.CreateAuthCacheResponse;
import org.newtonproject.hep.rest.models.CreatePayCacheResponse;
import org.newtonproject.hep.rest.models.CreateProofRequest;
import org.newtonproject.hep.rest.models.CreateProofResponse;
import org.newtonproject.hep.rest.models.Dapp;
import org.newtonproject.hep.rest.models.NewchainTransactionResponse;
import org.newtonproject.hep.rest.models.NewforceDailyStatsResponse;
import org.newtonproject.hep.rest.models.NewidResponse;
import org.newtonproject.hep.rest.models.PayCacheRequest;
import org.newtonproject.hep.rest.models.PayCacheResponse;
import org.newtonproject.hep.rest.models.ProofResponse;
import org.newtonproject.hep.rest.models.RetrieveOracleResponse;
import org.newtonproject.hep.rest.models.RetrieveProofReceiptsRequest;
import org.newtonproject.hep.rest.models.RetrieveProofReceiptsResponse;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public interface RestApi {
  /**
   * 
   * 
   * @param apiVersion  (required)
   * @param dappId  (required)
   * @param dappKey The decentralized application access key (required)
   * @param protocol The protocol name. default is &#39;HEP&#39;. (required)
   * @param version The protocol version such as &#39;1.0&#39; (required)
   * @param ts The current timestamp (required)
   * @param nonce The random string or auto-increment sequence (required)
   * @param os The operating system of client such as ios, android, dweb,etc. (required)
   * @param language The i18n language code such as zh, en, etc. (required)
   * @param dappSignatureMethod The signature method used by dapp. (required)
   * @param dappSignature The signature generated by dapp. (required)
   * @return Observable&lt;Dapp&gt;
   */
  @Headers({
    "Content-Type:application/json"
  })
  @GET("rest/v{api_version}/dapps/{dapp_id}/")
  Observable<Dapp> restDappsRead(
    @retrofit2.http.Path("api_version") String apiVersion, @retrofit2.http.Path("dapp_id") String dappId, @retrofit2.http.Query("dapp_key") String dappKey, @retrofit2.http.Query("protocol") String protocol, @retrofit2.http.Query("version") String version, @retrofit2.http.Query("ts") Integer ts, @retrofit2.http.Query("nonce") String nonce, @retrofit2.http.Query("os") String os, @retrofit2.http.Query("language") String language, @retrofit2.http.Query("dapp_signature_method") String dappSignatureMethod, @retrofit2.http.Query("dapp_signature") String dappSignature
  );

  /**
   * 
   * Retrieve the transaction information by given txid
   * @param apiVersion  (required)
   * @param txid  (required)
   * @param dappKey The decentralized application access key (required)
   * @param protocol The protocol name. default is &#39;HEP&#39;. (required)
   * @param version The protocol version such as &#39;1.0&#39; (required)
   * @param ts The current timestamp (required)
   * @param nonce The random string or auto-increment sequence (required)
   * @param os The operating system of client such as ios, android, dweb,etc. (required)
   * @param language The i18n language code such as zh, en, etc. (required)
   * @param dappSignatureMethod The signature method used by dapp. (required)
   * @param dappSignature The signature generated by dapp. (required)
   * @return Observable&lt;NewchainTransactionResponse&gt;
   */
  @Headers({
    "Content-Type:application/json"
  })
  @GET("rest/v{api_version}/newchain/tx/{txid}/")
  Observable<NewchainTransactionResponse> restNewchainTxRead(
    @retrofit2.http.Path("api_version") String apiVersion, @retrofit2.http.Path("txid") String txid, @retrofit2.http.Query("dapp_key") String dappKey, @retrofit2.http.Query("protocol") String protocol, @retrofit2.http.Query("version") String version, @retrofit2.http.Query("ts") Integer ts, @retrofit2.http.Query("nonce") String nonce, @retrofit2.http.Query("os") String os, @retrofit2.http.Query("language") String language, @retrofit2.http.Query("dapp_signature_method") String dappSignatureMethod, @retrofit2.http.Query("dapp_signature") String dappSignature
  );

  /**
   * 
   * Retrieve the daily newforce statistics
   * @param apiVersion  (required)
   * @param date  (required)
   * @param dappKey The decentralized application access key (required)
   * @param protocol The protocol name. default is &#39;HEP&#39;. (required)
   * @param version The protocol version such as &#39;1.0&#39; (required)
   * @param ts The current timestamp (required)
   * @param nonce The random string or auto-increment sequence (required)
   * @param os The operating system of client such as ios, android, dweb,etc. (required)
   * @param language The i18n language code such as zh, en, etc. (required)
   * @param dappSignatureMethod The signature method used by dapp. (required)
   * @param dappSignature The signature generated by dapp. (required)
   * @return Observable&lt;NewforceDailyStatsResponse&gt;
   */
  @Headers({
    "Content-Type:application/json"
  })
  @GET("rest/v{api_version}/newforce/{date}/")
  Observable<NewforceDailyStatsResponse> restNewforceRead(
    @retrofit2.http.Path("api_version") String apiVersion, @retrofit2.http.Path("date") String date, @retrofit2.http.Query("dapp_key") String dappKey, @retrofit2.http.Query("protocol") String protocol, @retrofit2.http.Query("version") String version, @retrofit2.http.Query("ts") Integer ts, @retrofit2.http.Query("nonce") String nonce, @retrofit2.http.Query("os") String os, @retrofit2.http.Query("language") String language, @retrofit2.http.Query("dapp_signature_method") String dappSignatureMethod, @retrofit2.http.Query("dapp_signature") String dappSignature
  );

  /**
   * 
   * Retrieve the information by given NewID
   * @param apiVersion  (required)
   * @param newid  (required)
   * @param dappKey The decentralized application access key (required)
   * @param protocol The protocol name. default is &#39;HEP&#39;. (required)
   * @param version The protocol version such as &#39;1.0&#39; (required)
   * @param ts The current timestamp (required)
   * @param nonce The random string or auto-increment sequence (required)
   * @param os The operating system of client such as ios, android, dweb,etc. (required)
   * @param language The i18n language code such as zh, en, etc. (required)
   * @param dappSignatureMethod The signature method used by dapp. (required)
   * @param dappSignature The signature generated by dapp. (required)
   * @return Observable&lt;NewidResponse&gt;
   */
  @Headers({
    "Content-Type:application/json"
  })
  @GET("rest/v{api_version}/newids/{newid}/")
  Observable<NewidResponse> restNewidsRead(
    @retrofit2.http.Path("api_version") String apiVersion, @retrofit2.http.Path("newid") String newid, @retrofit2.http.Query("dapp_key") String dappKey, @retrofit2.http.Query("protocol") String protocol, @retrofit2.http.Query("version") String version, @retrofit2.http.Query("ts") Integer ts, @retrofit2.http.Query("nonce") String nonce, @retrofit2.http.Query("os") String os, @retrofit2.http.Query("language") String language, @retrofit2.http.Query("dapp_signature_method") String dappSignatureMethod, @retrofit2.http.Query("dapp_signature") String dappSignature
  );

  /**
   * 
   * Caches the authentication request
   * @param apiVersion  (required)
   * @param data  (required)
   * @return Observable&lt;CreateAuthCacheResponse&gt;
   */
  @Headers({
    "Content-Type:application/json"
  })
  @POST("rest/v{api_version}/newnet/caches/auth/")
  Observable<CreateAuthCacheResponse> restNewnetCachesAuthCreate(
    @retrofit2.http.Path("api_version") String apiVersion, @retrofit2.http.Body AuthCacheRequest data
  );

  /**
   * 
   * Get the authentication information by given request hash.
   * @param apiVersion  (required)
   * @param authHash  (required)
   * @param dappKey The decentralized application access key (required)
   * @param protocol The protocol name. default is &#39;HEP&#39;. (required)
   * @param version The protocol version such as &#39;1.0&#39; (required)
   * @param ts The current timestamp (required)
   * @param nonce The random string or auto-increment sequence (required)
   * @param os The operating system of client such as ios, android, dweb,etc. (required)
   * @param language The i18n language code such as zh, en, etc. (required)
   * @param dappSignatureMethod The signature method used by dapp. (required)
   * @param dappSignature The signature generated by dapp. (required)
   * @return Observable&lt;AuthCacheResponse&gt;
   */
  @Headers({
    "Content-Type:application/json"
  })
  @GET("rest/v{api_version}/newnet/caches/auth/{auth_hash}/")
  Observable<AuthCacheResponse> restNewnetCachesAuthRead(
    @retrofit2.http.Path("api_version") String apiVersion, @retrofit2.http.Path("auth_hash") String authHash, @retrofit2.http.Query("dapp_key") String dappKey, @retrofit2.http.Query("protocol") String protocol, @retrofit2.http.Query("version") String version, @retrofit2.http.Query("ts") Integer ts, @retrofit2.http.Query("nonce") String nonce, @retrofit2.http.Query("os") String os, @retrofit2.http.Query("language") String language, @retrofit2.http.Query("dapp_signature_method") String dappSignatureMethod, @retrofit2.http.Query("dapp_signature") String dappSignature
  );

  /**
   * 
   * Cache the pay request
   * @param apiVersion  (required)
   * @param data  (required)
   * @return Observable&lt;CreatePayCacheResponse&gt;
   */
  @Headers({
    "Content-Type:application/json"
  })
  @POST("rest/v{api_version}/newnet/caches/pay/")
  Observable<CreatePayCacheResponse> restNewnetCachesPayCreate(
    @retrofit2.http.Path("api_version") String apiVersion, @retrofit2.http.Body PayCacheRequest data
  );

  /**
   * 
   * Retrieve the pay information by given pay hash.
   * @param apiVersion  (required)
   * @param payHash  (required)
   * @param dappKey The decentralized application access key (required)
   * @param protocol The protocol name. default is &#39;HEP&#39;. (required)
   * @param version The protocol version such as &#39;1.0&#39; (required)
   * @param ts The current timestamp (required)
   * @param nonce The random string or auto-increment sequence (required)
   * @param os The operating system of client such as ios, android, dweb,etc. (required)
   * @param language The i18n language code such as zh, en, etc. (required)
   * @param dappSignatureMethod The signature method used by dapp. (required)
   * @param dappSignature The signature generated by dapp. (required)
   * @return Observable&lt;PayCacheResponse&gt;
   */
  @Headers({
    "Content-Type:application/json"
  })
  @GET("rest/v{api_version}/newnet/caches/pay/{pay_hash}/")
  Observable<PayCacheResponse> restNewnetCachesPayRead(
    @retrofit2.http.Path("api_version") String apiVersion, @retrofit2.http.Path("pay_hash") String payHash, @retrofit2.http.Query("dapp_key") String dappKey, @retrofit2.http.Query("protocol") String protocol, @retrofit2.http.Query("version") String version, @retrofit2.http.Query("ts") Integer ts, @retrofit2.http.Query("nonce") String nonce, @retrofit2.http.Query("os") String os, @retrofit2.http.Query("language") String language, @retrofit2.http.Query("dapp_signature_method") String dappSignatureMethod, @retrofit2.http.Query("dapp_signature") String dappSignature
  );

  /**
   * 
   * Get the oracle information by given id.
   * @param apiVersion  (required)
   * @param oracleId  (required)
   * @param dappKey The decentralized application access key (required)
   * @param protocol The protocol name. default is &#39;HEP&#39;. (required)
   * @param version The protocol version such as &#39;1.0&#39; (required)
   * @param ts The current timestamp (required)
   * @param nonce The random string or auto-increment sequence (required)
   * @param os The operating system of client such as ios, android, dweb,etc. (required)
   * @param language The i18n language code such as zh, en, etc. (required)
   * @param dappSignatureMethod The signature method used by dapp. (required)
   * @param dappSignature The signature generated by dapp. (required)
   * @return Observable&lt;RetrieveOracleResponse&gt;
   */
  @Headers({
    "Content-Type:application/json"
  })
  @GET("rest/v{api_version}/oracles/{oracle_id}/")
  Observable<RetrieveOracleResponse> restOraclesRead(
    @retrofit2.http.Path("api_version") String apiVersion, @retrofit2.http.Path("oracle_id") String oracleId, @retrofit2.http.Query("dapp_key") String dappKey, @retrofit2.http.Query("protocol") String protocol, @retrofit2.http.Query("version") String version, @retrofit2.http.Query("ts") Integer ts, @retrofit2.http.Query("nonce") String nonce, @retrofit2.http.Query("os") String os, @retrofit2.http.Query("language") String language, @retrofit2.http.Query("dapp_signature_method") String dappSignatureMethod, @retrofit2.http.Query("dapp_signature") String dappSignature
  );

  /**
   * 
   * 
   * @param apiVersion  (required)
   * @param data  (required)
   * @return Observable&lt;CreateProofResponse&gt;
   */
  @Headers({
    "Content-Type:application/json"
  })
  @POST("rest/v{api_version}/proofs/")
  Observable<CreateProofResponse> restProofsCreate(
    @retrofit2.http.Path("api_version") String apiVersion, @retrofit2.http.Body CreateProofRequest data
  );

  /**
   * 
   * 
   * @param apiVersion  (required)
   * @param proofHash  (required)
   * @param data  (required)
   * @return Observable&lt;CancelProofResponse&gt;
   */
  @Headers({
    "Content-Type:application/json"
  })
  @DELETE("rest/v{api_version}/proofs/{proof_hash}/")
  Observable<CancelProofResponse> restProofsDelete(
    @retrofit2.http.Path("api_version") String apiVersion, @retrofit2.http.Path("proof_hash") String proofHash, @retrofit2.http.Body CancelProofRequest data
  );

  /**
   * 
   * Get the proof by given proof hash.
   * @param apiVersion  (required)
   * @param proofHash  (required)
   * @param dappKey The decentralized application access key (required)
   * @param protocol The protocol name. default is &#39;HEP&#39;. (required)
   * @param version The protocol version such as &#39;1.0&#39; (required)
   * @param ts The current timestamp (required)
   * @param nonce The random string or auto-increment sequence (required)
   * @param os The operating system of client such as ios, android, dweb,etc. (required)
   * @param language The i18n language code such as zh, en, etc. (required)
   * @param dappSignatureMethod The signature method used by dapp. (required)
   * @param dappSignature The signature generated by dapp. (required)
   * @return Observable&lt;ProofResponse&gt;
   */
  @Headers({
    "Content-Type:application/json"
  })
  @GET("rest/v{api_version}/proofs/{proof_hash}/")
  Observable<ProofResponse> restProofsRead(
    @retrofit2.http.Path("api_version") String apiVersion, @retrofit2.http.Path("proof_hash") String proofHash, @retrofit2.http.Query("dapp_key") String dappKey, @retrofit2.http.Query("protocol") String protocol, @retrofit2.http.Query("version") String version, @retrofit2.http.Query("ts") Integer ts, @retrofit2.http.Query("nonce") String nonce, @retrofit2.http.Query("os") String os, @retrofit2.http.Query("language") String language, @retrofit2.http.Query("dapp_signature_method") String dappSignatureMethod, @retrofit2.http.Query("dapp_signature") String dappSignature
  );

  /**
   * 
   * 
   * @param apiVersion  (required)
   * @param data  (required)
   * @return Observable&lt;RetrieveProofReceiptsResponse&gt;
   */
  @Headers({
    "Content-Type:application/json"
  })
  @POST("rest/v{api_version}/proofs/receipts/")
  Observable<RetrieveProofReceiptsResponse> restProofsReceiptsCreate(
    @retrofit2.http.Path("api_version") String apiVersion, @retrofit2.http.Body RetrieveProofReceiptsRequest data
  );

}
