# coding: utf-8

"""
    HEP REST API

    The REST API for HEP protocol  # noqa: E501

    OpenAPI spec version: v1
    Contact: xiawu@zeuux.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Dapp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dapp_key': 'str',
        'protocol': 'str',
        'version': 'str',
        'ts': 'int',
        'nonce': 'str',
        'os': 'str',
        'language': 'str',
        'md5': 'str',
        'dapp_id': 'str',
        'dapp_name': 'str',
        'icon': 'str',
        'public_key': 'str',
        'package_name': 'str',
        'bundle_id': 'str',
        'schema': 'str',
        'website': 'str',
        'download_url': 'str',
        'deposit_contract_address': 'str',
        'dapp_type': 'str',
        'dapp_category': 'str',
        'auth_login_callback': 'str',
        'pay_order_callback': 'str',
        'proof_submit_callback': 'str'
    }

    attribute_map = {
        'dapp_key': 'dapp_key',
        'protocol': 'protocol',
        'version': 'version',
        'ts': 'ts',
        'nonce': 'nonce',
        'os': 'os',
        'language': 'language',
        'md5': 'md5',
        'dapp_id': 'dapp_id',
        'dapp_name': 'dapp_name',
        'icon': 'icon',
        'public_key': 'public_key',
        'package_name': 'package_name',
        'bundle_id': 'bundle_id',
        'schema': 'schema',
        'website': 'website',
        'download_url': 'download_url',
        'deposit_contract_address': 'deposit_contract_address',
        'dapp_type': 'dapp_type',
        'dapp_category': 'dapp_category',
        'auth_login_callback': 'auth_login_callback',
        'pay_order_callback': 'pay_order_callback',
        'proof_submit_callback': 'proof_submit_callback'
    }

    def __init__(self, dapp_key=None, protocol=None, version=None, ts=None, nonce=None, os=None, language=None, md5=None, dapp_id=None, dapp_name=None, icon=None, public_key=None, package_name=None, bundle_id=None, schema=None, website=None, download_url=None, deposit_contract_address=None, dapp_type=None, dapp_category=None, auth_login_callback=None, pay_order_callback=None, proof_submit_callback=None):  # noqa: E501
        """Dapp - a model defined in Swagger"""  # noqa: E501
        self._dapp_key = None
        self._protocol = None
        self._version = None
        self._ts = None
        self._nonce = None
        self._os = None
        self._language = None
        self._md5 = None
        self._dapp_id = None
        self._dapp_name = None
        self._icon = None
        self._public_key = None
        self._package_name = None
        self._bundle_id = None
        self._schema = None
        self._website = None
        self._download_url = None
        self._deposit_contract_address = None
        self._dapp_type = None
        self._dapp_category = None
        self._auth_login_callback = None
        self._pay_order_callback = None
        self._proof_submit_callback = None
        self.discriminator = None
        self.dapp_key = dapp_key
        self.protocol = protocol
        self.version = version
        self.ts = ts
        self.nonce = nonce
        self.os = os
        self.language = language
        self.md5 = md5
        self.dapp_id = dapp_id
        self.dapp_name = dapp_name
        self.icon = icon
        self.public_key = public_key
        self.package_name = package_name
        self.bundle_id = bundle_id
        self.schema = schema
        self.website = website
        self.download_url = download_url
        self.deposit_contract_address = deposit_contract_address
        self.dapp_type = dapp_type
        self.dapp_category = dapp_category
        self.auth_login_callback = auth_login_callback
        self.pay_order_callback = pay_order_callback
        self.proof_submit_callback = proof_submit_callback

    @property
    def dapp_key(self):
        """Gets the dapp_key of this Dapp.  # noqa: E501

        The decentralized application access key  # noqa: E501

        :return: The dapp_key of this Dapp.  # noqa: E501
        :rtype: str
        """
        return self._dapp_key

    @dapp_key.setter
    def dapp_key(self, dapp_key):
        """Sets the dapp_key of this Dapp.

        The decentralized application access key  # noqa: E501

        :param dapp_key: The dapp_key of this Dapp.  # noqa: E501
        :type: str
        """
        if dapp_key is None:
            raise ValueError("Invalid value for `dapp_key`, must not be `None`")  # noqa: E501

        self._dapp_key = dapp_key

    @property
    def protocol(self):
        """Gets the protocol of this Dapp.  # noqa: E501

        The protocol name. default is 'HEP'.  # noqa: E501

        :return: The protocol of this Dapp.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this Dapp.

        The protocol name. default is 'HEP'.  # noqa: E501

        :param protocol: The protocol of this Dapp.  # noqa: E501
        :type: str
        """
        if protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")  # noqa: E501

        self._protocol = protocol

    @property
    def version(self):
        """Gets the version of this Dapp.  # noqa: E501

        The protocol version such as '1.0'  # noqa: E501

        :return: The version of this Dapp.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Dapp.

        The protocol version such as '1.0'  # noqa: E501

        :param version: The version of this Dapp.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def ts(self):
        """Gets the ts of this Dapp.  # noqa: E501

        The current timestamp  # noqa: E501

        :return: The ts of this Dapp.  # noqa: E501
        :rtype: int
        """
        return self._ts

    @ts.setter
    def ts(self, ts):
        """Sets the ts of this Dapp.

        The current timestamp  # noqa: E501

        :param ts: The ts of this Dapp.  # noqa: E501
        :type: int
        """
        if ts is None:
            raise ValueError("Invalid value for `ts`, must not be `None`")  # noqa: E501

        self._ts = ts

    @property
    def nonce(self):
        """Gets the nonce of this Dapp.  # noqa: E501

        The random string or auto-increment sequence  # noqa: E501

        :return: The nonce of this Dapp.  # noqa: E501
        :rtype: str
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """Sets the nonce of this Dapp.

        The random string or auto-increment sequence  # noqa: E501

        :param nonce: The nonce of this Dapp.  # noqa: E501
        :type: str
        """
        if nonce is None:
            raise ValueError("Invalid value for `nonce`, must not be `None`")  # noqa: E501

        self._nonce = nonce

    @property
    def os(self):
        """Gets the os of this Dapp.  # noqa: E501

        The operating system of client such as ios, android, dweb,etc.  # noqa: E501

        :return: The os of this Dapp.  # noqa: E501
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this Dapp.

        The operating system of client such as ios, android, dweb,etc.  # noqa: E501

        :param os: The os of this Dapp.  # noqa: E501
        :type: str
        """
        if os is None:
            raise ValueError("Invalid value for `os`, must not be `None`")  # noqa: E501

        self._os = os

    @property
    def language(self):
        """Gets the language of this Dapp.  # noqa: E501

        The i18n language code such as zh, en, etc.  # noqa: E501

        :return: The language of this Dapp.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Dapp.

        The i18n language code such as zh, en, etc.  # noqa: E501

        :param language: The language of this Dapp.  # noqa: E501
        :type: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")  # noqa: E501

        self._language = language

    @property
    def md5(self):
        """Gets the md5 of this Dapp.  # noqa: E501

        The HMAC authentication md5 checksum  # noqa: E501

        :return: The md5 of this Dapp.  # noqa: E501
        :rtype: str
        """
        return self._md5

    @md5.setter
    def md5(self, md5):
        """Sets the md5 of this Dapp.

        The HMAC authentication md5 checksum  # noqa: E501

        :param md5: The md5 of this Dapp.  # noqa: E501
        :type: str
        """
        if md5 is None:
            raise ValueError("Invalid value for `md5`, must not be `None`")  # noqa: E501

        self._md5 = md5

    @property
    def dapp_id(self):
        """Gets the dapp_id of this Dapp.  # noqa: E501

        The decentralized application ID  # noqa: E501

        :return: The dapp_id of this Dapp.  # noqa: E501
        :rtype: str
        """
        return self._dapp_id

    @dapp_id.setter
    def dapp_id(self, dapp_id):
        """Sets the dapp_id of this Dapp.

        The decentralized application ID  # noqa: E501

        :param dapp_id: The dapp_id of this Dapp.  # noqa: E501
        :type: str
        """
        if dapp_id is None:
            raise ValueError("Invalid value for `dapp_id`, must not be `None`")  # noqa: E501

        self._dapp_id = dapp_id

    @property
    def dapp_name(self):
        """Gets the dapp_name of this Dapp.  # noqa: E501

        The decentralized application name  # noqa: E501

        :return: The dapp_name of this Dapp.  # noqa: E501
        :rtype: str
        """
        return self._dapp_name

    @dapp_name.setter
    def dapp_name(self, dapp_name):
        """Sets the dapp_name of this Dapp.

        The decentralized application name  # noqa: E501

        :param dapp_name: The dapp_name of this Dapp.  # noqa: E501
        :type: str
        """
        if dapp_name is None:
            raise ValueError("Invalid value for `dapp_name`, must not be `None`")  # noqa: E501

        self._dapp_name = dapp_name

    @property
    def icon(self):
        """Gets the icon of this Dapp.  # noqa: E501

        The icon of application  # noqa: E501

        :return: The icon of this Dapp.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this Dapp.

        The icon of application  # noqa: E501

        :param icon: The icon of this Dapp.  # noqa: E501
        :type: str
        """
        if icon is None:
            raise ValueError("Invalid value for `icon`, must not be `None`")  # noqa: E501

        self._icon = icon

    @property
    def public_key(self):
        """Gets the public_key of this Dapp.  # noqa: E501

        The public key of DApp  # noqa: E501

        :return: The public_key of this Dapp.  # noqa: E501
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this Dapp.

        The public key of DApp  # noqa: E501

        :param public_key: The public_key of this Dapp.  # noqa: E501
        :type: str
        """
        if public_key is None:
            raise ValueError("Invalid value for `public_key`, must not be `None`")  # noqa: E501

        self._public_key = public_key

    @property
    def package_name(self):
        """Gets the package_name of this Dapp.  # noqa: E501

        The package name such as com.demo.dev.android  # noqa: E501

        :return: The package_name of this Dapp.  # noqa: E501
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """Sets the package_name of this Dapp.

        The package name such as com.demo.dev.android  # noqa: E501

        :param package_name: The package_name of this Dapp.  # noqa: E501
        :type: str
        """
        if package_name is None:
            raise ValueError("Invalid value for `package_name`, must not be `None`")  # noqa: E501

        self._package_name = package_name

    @property
    def bundle_id(self):
        """Gets the bundle_id of this Dapp.  # noqa: E501

        The bundle id such as com.demo.dev.ios for iOS platform  # noqa: E501

        :return: The bundle_id of this Dapp.  # noqa: E501
        :rtype: str
        """
        return self._bundle_id

    @bundle_id.setter
    def bundle_id(self, bundle_id):
        """Sets the bundle_id of this Dapp.

        The bundle id such as com.demo.dev.ios for iOS platform  # noqa: E501

        :param bundle_id: The bundle_id of this Dapp.  # noqa: E501
        :type: str
        """
        if bundle_id is None:
            raise ValueError("Invalid value for `bundle_id`, must not be `None`")  # noqa: E501

        self._bundle_id = bundle_id

    @property
    def schema(self):
        """Gets the schema of this Dapp.  # noqa: E501

        The routing schema  # noqa: E501

        :return: The schema of this Dapp.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this Dapp.

        The routing schema  # noqa: E501

        :param schema: The schema of this Dapp.  # noqa: E501
        :type: str
        """
        if schema is None:
            raise ValueError("Invalid value for `schema`, must not be `None`")  # noqa: E501

        self._schema = schema

    @property
    def website(self):
        """Gets the website of this Dapp.  # noqa: E501

        The dapp website link  # noqa: E501

        :return: The website of this Dapp.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Dapp.

        The dapp website link  # noqa: E501

        :param website: The website of this Dapp.  # noqa: E501
        :type: str
        """
        if website is None:
            raise ValueError("Invalid value for `website`, must not be `None`")  # noqa: E501

        self._website = website

    @property
    def download_url(self):
        """Gets the download_url of this Dapp.  # noqa: E501

        The dapp download link  # noqa: E501

        :return: The download_url of this Dapp.  # noqa: E501
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this Dapp.

        The dapp download link  # noqa: E501

        :param download_url: The download_url of this Dapp.  # noqa: E501
        :type: str
        """
        if download_url is None:
            raise ValueError("Invalid value for `download_url`, must not be `None`")  # noqa: E501

        self._download_url = download_url

    @property
    def deposit_contract_address(self):
        """Gets the deposit_contract_address of this Dapp.  # noqa: E501

        The deposit contract Address, the example is NEW182....  # noqa: E501

        :return: The deposit_contract_address of this Dapp.  # noqa: E501
        :rtype: str
        """
        return self._deposit_contract_address

    @deposit_contract_address.setter
    def deposit_contract_address(self, deposit_contract_address):
        """Sets the deposit_contract_address of this Dapp.

        The deposit contract Address, the example is NEW182....  # noqa: E501

        :param deposit_contract_address: The deposit_contract_address of this Dapp.  # noqa: E501
        :type: str
        """
        if deposit_contract_address is None:
            raise ValueError("Invalid value for `deposit_contract_address`, must not be `None`")  # noqa: E501

        self._deposit_contract_address = deposit_contract_address

    @property
    def dapp_type(self):
        """Gets the dapp_type of this Dapp.  # noqa: E501

        The dapp type. choices:android, ios, dweb,newdapp.  # noqa: E501

        :return: The dapp_type of this Dapp.  # noqa: E501
        :rtype: str
        """
        return self._dapp_type

    @dapp_type.setter
    def dapp_type(self, dapp_type):
        """Sets the dapp_type of this Dapp.

        The dapp type. choices:android, ios, dweb,newdapp.  # noqa: E501

        :param dapp_type: The dapp_type of this Dapp.  # noqa: E501
        :type: str
        """
        if dapp_type is None:
            raise ValueError("Invalid value for `dapp_type`, must not be `None`")  # noqa: E501

        self._dapp_type = dapp_type

    @property
    def dapp_category(self):
        """Gets the dapp_category of this Dapp.  # noqa: E501

        The dapp category. choices: game, retail.  # noqa: E501

        :return: The dapp_category of this Dapp.  # noqa: E501
        :rtype: str
        """
        return self._dapp_category

    @dapp_category.setter
    def dapp_category(self, dapp_category):
        """Sets the dapp_category of this Dapp.

        The dapp category. choices: game, retail.  # noqa: E501

        :param dapp_category: The dapp_category of this Dapp.  # noqa: E501
        :type: str
        """
        if dapp_category is None:
            raise ValueError("Invalid value for `dapp_category`, must not be `None`")  # noqa: E501

        self._dapp_category = dapp_category

    @property
    def auth_login_callback(self):
        """Gets the auth_login_callback of this Dapp.  # noqa: E501

        For Mobile Native DApp, it is redirect schema; For website DApp, it is callback url; For  NewDApp, it is HEP-based url.  # noqa: E501

        :return: The auth_login_callback of this Dapp.  # noqa: E501
        :rtype: str
        """
        return self._auth_login_callback

    @auth_login_callback.setter
    def auth_login_callback(self, auth_login_callback):
        """Sets the auth_login_callback of this Dapp.

        For Mobile Native DApp, it is redirect schema; For website DApp, it is callback url; For  NewDApp, it is HEP-based url.  # noqa: E501

        :param auth_login_callback: The auth_login_callback of this Dapp.  # noqa: E501
        :type: str
        """
        if auth_login_callback is None:
            raise ValueError("Invalid value for `auth_login_callback`, must not be `None`")  # noqa: E501

        self._auth_login_callback = auth_login_callback

    @property
    def pay_order_callback(self):
        """Gets the pay_order_callback of this Dapp.  # noqa: E501

        For Mobile Native DApp, it is redirect schema; For website DApp, it is callback url; For  NewDApp, it is HEP-based url.  # noqa: E501

        :return: The pay_order_callback of this Dapp.  # noqa: E501
        :rtype: str
        """
        return self._pay_order_callback

    @pay_order_callback.setter
    def pay_order_callback(self, pay_order_callback):
        """Sets the pay_order_callback of this Dapp.

        For Mobile Native DApp, it is redirect schema; For website DApp, it is callback url; For  NewDApp, it is HEP-based url.  # noqa: E501

        :param pay_order_callback: The pay_order_callback of this Dapp.  # noqa: E501
        :type: str
        """
        if pay_order_callback is None:
            raise ValueError("Invalid value for `pay_order_callback`, must not be `None`")  # noqa: E501

        self._pay_order_callback = pay_order_callback

    @property
    def proof_submit_callback(self):
        """Gets the proof_submit_callback of this Dapp.  # noqa: E501

        For Mobile Native DApp, it is redirect schema; For website DApp, it is callback url; For  NewDApp, it is HEP-based url.  # noqa: E501

        :return: The proof_submit_callback of this Dapp.  # noqa: E501
        :rtype: str
        """
        return self._proof_submit_callback

    @proof_submit_callback.setter
    def proof_submit_callback(self, proof_submit_callback):
        """Sets the proof_submit_callback of this Dapp.

        For Mobile Native DApp, it is redirect schema; For website DApp, it is callback url; For  NewDApp, it is HEP-based url.  # noqa: E501

        :param proof_submit_callback: The proof_submit_callback of this Dapp.  # noqa: E501
        :type: str
        """
        if proof_submit_callback is None:
            raise ValueError("Invalid value for `proof_submit_callback`, must not be `None`")  # noqa: E501

        self._proof_submit_callback = proof_submit_callback

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Dapp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Dapp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
