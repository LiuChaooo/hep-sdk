# coding: utf-8

"""
    HEP REST API

    The REST API for HEP protocol  # noqa: E501

    OpenAPI spec version: v1
    Contact: xiawu@zeuux.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class NewidsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def newids_read(self, newid, dapp_key, protocol, version, ts, nonce, os, language, md5, **kwargs):  # noqa: E501
        """newids_read  # noqa: E501

        Retrieve the information by given NewID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newids_read(newid, dapp_key, protocol, version, ts, nonce, os, language, md5, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str newid: (required)
        :param str dapp_key: The decentralized application access key (required)
        :param str protocol: The protocol name. default is 'HEP'. (required)
        :param str version: The protocol version such as '1.0' (required)
        :param int ts: The current timestamp (required)
        :param str nonce: The random string or auto-increment sequence (required)
        :param str os: The operating system of client such as ios, android, dweb,etc. (required)
        :param str language: The i18n language code such as zh, en, etc. (required)
        :param str md5: The HMAC authentication md5 checksum (required)
        :return: NewidResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.newids_read_with_http_info(newid, dapp_key, protocol, version, ts, nonce, os, language, md5, **kwargs)  # noqa: E501
        else:
            (data) = self.newids_read_with_http_info(newid, dapp_key, protocol, version, ts, nonce, os, language, md5, **kwargs)  # noqa: E501
            return data

    def newids_read_with_http_info(self, newid, dapp_key, protocol, version, ts, nonce, os, language, md5, **kwargs):  # noqa: E501
        """newids_read  # noqa: E501

        Retrieve the information by given NewID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.newids_read_with_http_info(newid, dapp_key, protocol, version, ts, nonce, os, language, md5, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str newid: (required)
        :param str dapp_key: The decentralized application access key (required)
        :param str protocol: The protocol name. default is 'HEP'. (required)
        :param str version: The protocol version such as '1.0' (required)
        :param int ts: The current timestamp (required)
        :param str nonce: The random string or auto-increment sequence (required)
        :param str os: The operating system of client such as ios, android, dweb,etc. (required)
        :param str language: The i18n language code such as zh, en, etc. (required)
        :param str md5: The HMAC authentication md5 checksum (required)
        :return: NewidResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['newid', 'dapp_key', 'protocol', 'version', 'ts', 'nonce', 'os', 'language', 'md5']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method newids_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'newid' is set
        if ('newid' not in params or
                params['newid'] is None):
            raise ValueError("Missing the required parameter `newid` when calling `newids_read`")  # noqa: E501
        # verify the required parameter 'dapp_key' is set
        if ('dapp_key' not in params or
                params['dapp_key'] is None):
            raise ValueError("Missing the required parameter `dapp_key` when calling `newids_read`")  # noqa: E501
        # verify the required parameter 'protocol' is set
        if ('protocol' not in params or
                params['protocol'] is None):
            raise ValueError("Missing the required parameter `protocol` when calling `newids_read`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `newids_read`")  # noqa: E501
        # verify the required parameter 'ts' is set
        if ('ts' not in params or
                params['ts'] is None):
            raise ValueError("Missing the required parameter `ts` when calling `newids_read`")  # noqa: E501
        # verify the required parameter 'nonce' is set
        if ('nonce' not in params or
                params['nonce'] is None):
            raise ValueError("Missing the required parameter `nonce` when calling `newids_read`")  # noqa: E501
        # verify the required parameter 'os' is set
        if ('os' not in params or
                params['os'] is None):
            raise ValueError("Missing the required parameter `os` when calling `newids_read`")  # noqa: E501
        # verify the required parameter 'language' is set
        if ('language' not in params or
                params['language'] is None):
            raise ValueError("Missing the required parameter `language` when calling `newids_read`")  # noqa: E501
        # verify the required parameter 'md5' is set
        if ('md5' not in params or
                params['md5'] is None):
            raise ValueError("Missing the required parameter `md5` when calling `newids_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'newid' in params:
            path_params['newid'] = params['newid']  # noqa: E501

        query_params = []
        if 'dapp_key' in params:
            query_params.append(('dapp_key', params['dapp_key']))  # noqa: E501
        if 'protocol' in params:
            query_params.append(('protocol', params['protocol']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501
        if 'ts' in params:
            query_params.append(('ts', params['ts']))  # noqa: E501
        if 'nonce' in params:
            query_params.append(('nonce', params['nonce']))  # noqa: E501
        if 'os' in params:
            query_params.append(('os', params['os']))  # noqa: E501
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'md5' in params:
            query_params.append(('md5', params['md5']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/newids/{newid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NewidResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
